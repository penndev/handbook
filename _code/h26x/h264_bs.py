from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from h264_slice_mb import MacroBlock
    from h264_slice_data import SliceData
    from h264_pps import PPS
    from h264_sps import SPS

from h264_define import MbType, SliceType


def InverseRasterScan(a, b, c, d, e):
    if e == 0:
        return (a % (d // b)) * b
    elif e == 1:
        return (a // (d // b)) * c
    else:
        raise('InverseRasterScan error')

def Clip3(value, minVal, maxVal):
    return min(max(value, minVal), maxVal)


class BitStream():
    '''根据 7.2 Specification of syntax functions, categories, and descriptors 文档定义的数据读取方法'''

    def __init__(self, hex: bytearray, sps:SPS, pps:PPS) -> None:
        self.hex = hex
        '''字节流读取的位置'''
        self.position = 0
        # '当前数据读取流参数应该都放置到bs,bs是全局的
        self.sps = sps
        self.pps = pps

    # 读取原始字节流基础函数，移动指针
    def read_bits(self, n) -> int:
        '从字节流 返回n位无符号整数 大字节序列'
        value = 0  # 用于存储读取的值
        while n > 0:
            byte_pos = self.position // 8  # 当前字节的位置
            bit_offset = self.position % 8  # 当前字节的位偏移量
            remaining_bits_in_byte = 8 - bit_offset  # 当前字节剩余可用位数
            # 计算当前读取的位数，取 n 和剩余位数的最小值
            bits_to_read = min(n, remaining_bits_in_byte)
            current_byte = self.hex[byte_pos]  # 从当前字节提取所需的位
            current_bits = (current_byte >> (
                remaining_bits_in_byte - bits_to_read)) & ((1 << bits_to_read) - 1)
            value = (value << bits_to_read) | current_bits  # 将提取到的位拼接到结果中
            self.position += bits_to_read  # 更新位置和剩余要读取的位数
            n -= bits_to_read
        return value

    # 哥伦布编码
    def read_ue(self) -> int:
        '''解析 H.264 中的 ue(v) (无符号指数哥伦布编码0阶)'''
        leading_zeros = 0
        while self.read_bits(1) == 0:  # 1. 计算前导零的个数
            leading_zeros += 1
        if leading_zeros == 0:  # 2. 读取对应数量的位
            return 0  # 特殊情况，前导 0 个数为 0 时，值为 0
        return (1 << leading_zeros) - 1 + self.read_bits(leading_zeros)

    def read_se(self) -> int:
        code_num = self.read_ue()
        if code_num % 2 == 0:
            return -(code_num // 2)
        else:
            return code_num // 2 + 1

    def read_me(self) -> int:
        ChromaArrayType1_2 = (
            (0,  47,   0),
            (1,  31,   16),
            (2,  15,   1),
            (3,  0,   2),
            (4,  23,   4),
            (5,  27,   8),
            (6,  29,   32),
            (7,  30,   3),
            (8,  7,   5),
            (9,  11,   10),
            (10,  13,   12),
            (11,  14,   15),
            (12,  39,   47),
            (13,  43,   7),
            (14,  45,   11),
            (15,  46,   13),
            (16,  16,   14),
            (17,  3,   6),
            (18,  5,   9),
            (19,  10,   31),
            (20,  12,   35),
            (21,  19,   37),
            (22,  21,   42),
            (23,  26,   44),
            (24,  28,   33),
            (25,  35,   34),
            (26,  37,   36),
            (27,  42,   40),
            (28,  44,   39),
            (29,  1,   43),
            (30,  2,   45),
            (31,  4,   46),
            (32,  8,   17),
            (33,  17,   18),
            (34,  18,   20),
            (35,  20,   24),
            (36,  24,   19),
            (37,  6,   21),
            (38,  9,   26),
            (39,  22,   28),
            (40,  25,   23),
            (41,  32,   27),
            (42,  33,   29),
            (43,  34,   30),
            (44,  36,   22),
            (45,  40,   25),
            (46,  38,   38),
            (47,  41,   41)
        )

        ChromaArrayType0_3 = (
            (0,  15,   0),
            (1,  0,   1),
            (2,  7,   2),
            (3,  11,   4),
            (4,  13,   8),
            (5,  14,   3),
            (6,  3,   5),
            (7,  5,   10),
            (8,  10,   12),
            (9,  12,   15),
            (10,  1,   7),
            (11,  2,   11),
            (12,  4,   13),
            (13,  8,   14),
            (14,  6,   6),
            (15,  9,   9),
        )


        uev = self.read_ue()
        if self.sps.chroma_format_idc in [1, 2]:
            return ChromaArrayType1_2[uev]
        elif self.sps.chroma_format_idc in [0, 3]:
            return ChromaArrayType0_3[uev]

    # 
    def read_ae(self):
        ''' CABAC解析过程 \n
            sps. entropy_coding_mode_flag = 1 才会调用本过程
        '''
        # pStateIdx
        # valMPS1
        raise ('not support ae(v)')

    def read_te(self):
        raise ('not support te(v)')

    def more_rbsp_data(self):
        return not self.rbsp_trailing_bits()

    def more_rbsp_trailing_data(self):
        return self.position < len(self.hex)

    def byte_aligned(self):
        '''判断字节是否对齐'''
        return self.position % 8 == 0

    def rbsp_trailing_bits(self):
        '''rbsp_trailing_bits 如果失败返回False并还原postion'''
        current = self.position
        if self.read_bits(1) != 1:
            self.position = current
            return False
        while not self.byte_aligned():
            if self.read_bits(1) != 0:
                self.position = current
                return False
        return True

    #
    # ------------------------------------ CABAC ------------------------------------ #
    #                 

    def cabac_getmn(self, ctxIdx: int, cabac_init_idc: int, slice_type: SliceType) -> tuple[int, int]:
        ''' 9[12-24]nm对照表'''
        if ctxIdx >= 0 and ctxIdx <= 10:
            ctxMN = (
                (20, -15), (2, 54), (3, 74), (20, -15), (2, 54),
                (3, 74), (-28, 127), (-23, 104), (-6, 53), (-1, 54),
                (7, 51)
            )
        elif ctxIdx >= 11 and ctxIdx <= 23:
            ctxMNIDC = (
                (
                    (23, 33), (23, 2), (21, 0), (1, 9), (0, 49),
                    (-37, 118), (5, 57), (-13, 78), (-11, 65), (1, 62),
                    (12, 49), (-4, 73), (17, 50)
                ),
                (
                    (22, 25), (34, 0), (16, 0), (-2, 9), (4, 41),
                    (-29, 118), (2, 65), (-6, 71), (-13, 79), (5, 52),
                    (9, 50), (-3, 70), (10, 54)
                ),
                (
                    (29, 16), (25, 0), (14, 0), (-10, 51), (-3, 62),
                    (-27, 99), (26, 16), (-4, 85), (-24, 102), (5, 57),
                    (6, 57), (-17, 73), (14, 57)
                )
            )
            ctxMN = ctxMNIDC[cabac_init_idc]
            ctxIdx -= 11
        elif ctxIdx >= 24 and ctxIdx <= 39:
            ctxMNIDC = (
                (
                    (18, 64), (9, 43), (29, 0), (26, 67), (16, 90),
                    (9, 104), (-46, 127), (-20, 104), (1, 67), (-13, 78),
                    (-11, 65), (1, 62), (-6, 86), (-17, 95), (-6, 61),
                    (9, 45)
                ),
                (
                    (26, 34), (19, 22), (40, 0), (57, 2), (41, 36),
                    (26, 69), (-45, 127), (-15, 101), (-4, 76), (-6, 71),
                    (-13, 79), (5, 52), (6, 69), (-13, 90), (0, 52),
                    (8, 43)
                ),
                (
                    (20, 40), (20, 10), (29, 0), (54, 0), (37, 42),
                    (12, 97), (-32, 127), (-22, 117), (-2, 74), (-4, 85),
                    (-24, 102), (5, 57), (-6, 93), (-14, 88), (-6, 44),
                    (4, 55)
                )
            )
            ctxMN = ctxMNIDC[cabac_init_idc]
            ctxIdx -= 24
        elif ctxIdx >= 40 and ctxIdx <= 53:
            ctxMNIDC = (
                (
                    (-3, 69), (-6, 81), (-11, 96), (6, 55), (7, 67), (-5,
                                                                      86), (2, 88), (0, 58), (-3, 76), (-10, 94),
                    (5, 54), (4, 69), (-3, 81), (0, 88)
                ),
                (
                    (-2, 69), (-5, 82), (-10, 96), (2, 59), (2, 75), (-3,
                                                                      87), (-3, 100), (1, 56), (-3, 74), (-6, 85),
                    (0, 59), (-3, 81), (-7, 86), (-5, 95)
                ),
                (
                    (-11, 89), (-15, 103), (-21, 116), (19, 57), (20,
                                                                  58), (4, 84), (6, 96), (1, 63), (-5, 85), (-13, 106),
                    (5, 63), (6, 75), (-3, 90), (-1, 101)
                )
            )
            ctxMN = ctxMNIDC[cabac_init_idc]
            ctxIdx -= 40
        elif ctxIdx >= 54 and ctxIdx <= 59:
            if slice_type == SliceType.I:
                return (0, 0)
            ctxMNIDC = (
                (
                    (-7, 67), (-5, 74), (-4, 74), (-5, 80), (-7, 72), (1, 58)
                ),
                (
                    (-1, 66), (-1, 77), (1, 70), (-2, 86), (-5, 72), (0, 61)
                ),
                (
                    (3, 55), (-4, 79), (-2, 75), (-12, 97), (-7, 50), (1, 60)
                )
            )
            ctxMN = ctxMNIDC[cabac_init_idc]
            ctxIdx -= 54
        elif ctxIdx >= 60 and ctxIdx <= 69:
            ctxMN = (
                (0, 41), (0, 63), (0, 63), (0, 63), (-9, 83),
                (4, 86), (0, 97), (-7, 72), (13, 41), (3, 62)
            )
            ctxIdx -= 60
        elif ctxIdx >= 70 and ctxIdx <= 104:
            ctxMNIDC = (
                (
                    (0, 11), (1, 55), (0, 69), (-17, 127), (-13, 102), (0,
                                                                        82), (-7, 74), (-21, 107), (-27, 127), (-31, 127),
                    (-24, 127), (-18, 95), (-27, 127), (-21, 114), (-30, 127), (-17,
                                                                                123), (-12, 115), (-16, 122), (-11, 115), (-12, 63),
                    (-2, 68), (-15, 84), (-13, 104), (-3, 70), (-8,
                                                                93), (-10, 90), (-30, 127), (-1, 74), (-6, 97), (-7, 91),
                    (-20, 127), (-4, 56), (-5, 82), (-7, 76), (-22, 125)
                ),
                (
                    (0, 45), (-4, 78), (-3, 96), (-27, 126), (-28, 98), (-25,
                                                                         101), (-23, 67), (-28, 82), (-20, 94), (-16, 83),
                    (-22, 110), (-21, 91), (-18, 102), (-13, 93), (-29,
                                                                   127), (-7, 92), (-5, 89), (-7, 96), (-13, 108), (-3, 46),
                    (-1, 65), (-1, 57), (-9, 93), (-3, 74), (-9,
                                                             92), (-8, 87), (-23, 126), (5, 54), (6, 60), (6, 59),
                    (6, 69), (-1, 48), (0, 68), (-4, 69), (-8, 88)
                ),
                (
                    (13, 15), (7, 51), (2, 80), (-39, 127), (-18, 91), (-17,
                                                                        96), (-26, 81), (-35, 98), (-24, 102), (-23, 97),
                    (-27, 119), (-24, 99), (-21, 110), (-18, 102), (-36,
                                                                    127), (0, 80), (-5, 89), (-7, 94), (-4, 92), (0, 39),
                    (0, 65), (-15, 84), (-35, 127), (-2, 73), (-12,
                                                               104), (-9, 91), (-31, 127), (3, 55), (7, 56), (7, 55),
                    (8, 61), (-3, 53), (0, 68), (-7, 74), (-9, 88)
                ),
                (
                    (7, 34), (-9, 88), (-20, 127), (-36, 127), (-17, 91), (-14,
                                                                           95), (-25, 84), (-25, 86), (-12, 89), (-17, 91),
                    (-31, 127), (-14, 76), (-18, 103), (-13, 90), (-37,
                                                                   127), (11, 80), (5, 76), (2, 84), (5, 78), (-6, 55),
                    (4, 61), (-14, 83), (-37, 127), (-5, 79), (-11,
                                                               104), (-11, 91), (-30, 127), (0, 65), (-2, 79), (0, 72),
                    (-4, 92), (-6, 56), (3, 68), (-8, 71), (-13, 98)
                )
            )
            if slice_type in (SliceType.I, SliceType.SI):
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 70
        elif ctxIdx >= 105 and ctxIdx <= 165:
            ctxMNIDC = (
                (
                    (-7, 93), (-11, 87), (-3, 77), (-5, 71), (-4,
                                                              63), (-4, 68), (-12, 84), (-7, 62), (-7, 65), (8, 61),
                    (5, 56), (-2, 66), (1, 64), (0, 61), (-2, 78), (1,
                                                                    50), (7, 52), (10, 35), (0, 44), (11, 38),
                    (1, 45), (0, 46), (5, 44), (31, 17), (1, 51), (7,
                                                                   50), (28, 19), (16, 33), (14, 62), (-13, 108),
                    (-15, 100), (-13, 101), (-13, 91), (-12, 94), (-10,
                                                                   88), (-16, 84), (-10, 86), (-7, 83), (-13, 87), (-19, 94),
                    (1, 70), (0, 72), (-5, 74), (18, 59), (-8, 102), (-15,
                                                                      100), (0, 95), (-4, 75), (2, 72), (-11, 75),
                    (-3, 71), (15, 46), (-13, 69), (0, 62), (0, 65), (21,
                                                                      37), (-15, 72), (9, 57), (16, 54), (0, 62),
                    (12, 72)
                ),
                (
                    (-2, 85), (-6, 78), (-1, 75), (-7, 77), (2,
                                                             54), (5, 50), (-3, 68), (1, 50), (6, 42), (-4, 81),
                    (1, 63), (-4, 70), (0, 67), (2, 57), (-2, 76), (11,
                                                                    35), (4, 64), (1, 61), (11, 35), (18, 25),
                    (12, 24), (13, 29), (13, 36), (-10, 93), (-7,
                                                              73), (-2, 73), (13, 46), (9, 49), (-7, 100), (9, 53),
                    (2, 53), (5, 53), (-2, 61), (0, 56), (0, 56), (-13,
                                                                   63), (-5, 60), (-1, 62), (4, 57), (-6, 69),
                    (4, 57), (14, 39), (4, 51), (13, 68), (3, 64), (1,
                                                                    61), (9, 63), (7, 50), (16, 39), (5, 44),
                    (4, 52), (11, 48), (-5, 60), (-1, 59), (0, 59), (22,
                                                                     33), (5, 44), (14, 43), (-1, 78), (0, 60),
                    (9, 69)
                ),
                (
                    (-13, 103), (-13, 91), (-9, 89), (-14, 92), (-8, 76), (-12,
                                                                           87), (-23, 110), (-24, 105), (-10, 78), (-20, 112),
                    (-17, 99), (-78, 127), (-70, 127), (-50, 127), (-46,
                                                                    127), (-4, 66), (-5, 78), (-4, 71), (-8, 72), (2, 59),
                    (-1, 55), (-7, 70), (-6, 75), (-8, 89), (-34, 119), (-3,
                                                                         75), (32, 20), (30, 22), (-44, 127), (0, 54),
                    (-5, 61), (0, 58), (-1, 60), (-3, 61), (-8, 67), (-25,
                                                                      84), (-14, 74), (-5, 65), (5, 52), (2, 57),
                    (0, 61), (-9, 69), (-11, 70), (18, 55), (-4,
                                                             71), (0, 58), (7, 61), (9, 41), (18, 25), (9, 32),
                    (5, 43), (9, 47), (0, 44), (0, 51), (2, 46), (19,
                                                                  38), (-4, 66), (15, 38), (12, 42), (9, 34),
                    (0, 89)
                ),
                (
                    (-4, 86), (-12, 88), (-5, 82), (-3, 72), (-4,
                                                              67), (-8, 72), (-16, 89), (-9, 69), (-1, 59), (5, 66),
                    (4, 57), (-4, 71), (-2, 71), (2, 58), (-1, 74), (-4,
                                                                     44), (-1, 69), (0, 62), (-7, 51), (-4, 47),
                    (-6, 42), (-3, 41), (-6, 53), (8, 76), (-9,
                                                            78), (-11, 83), (9, 52), (0, 67), (-5, 90), (1, 67),
                    (-15, 72), (-5, 75), (-8, 80), (-21, 83), (-21,
                                                               64), (-13, 31), (-25, 64), (-29, 94), (9, 75), (17, 63),
                    (-8, 74), (-5, 35), (-2, 27), (13, 91), (3, 65), (-7,
                                                                      69), (8, 77), (-10, 66), (3, 62), (-3, 68),
                    (-20, 81), (0, 30), (1, 7), (-3, 23), (-21, 74), (16,
                                                                      66), (-23, 124), (17, 37), (44, -18), (50, -34),
                    (-22, 127)
                )
            )
            if slice_type in (SliceType.I, SliceType.SI):
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 105
        elif ctxIdx >= 166 and ctxIdx <= 226:
            ctxMNIDC = (
                (
                    (24, 0), (15, 9), (8, 25), (13, 18), (15, 9), (13,
                                                                   19), (10, 37), (12, 18), (6, 29), (20, 33),
                    (15, 30), (4, 45), (1, 58), (0, 62), (7, 61), (12,
                                                                   38), (11, 45), (15, 39), (11, 42), (13, 44),
                    (16, 45), (12, 41), (10, 49), (30, 34), (18, 42), (10,
                                                                       55), (17, 51), (17, 46), (0, 89), (26, -19),
                    (22, -17), (26, -17), (30, -25), (28, -20), (33, -
                                                                 23), (37, -27), (33, -23), (40, -28), (38, -17), (33, -11),
                    (40, -15), (41, -6), (38, 1), (41, 17), (30, -
                                                             6), (27, 3), (26, 22), (37, -16), (35, -4), (38, -8),
                    (38, -3), (37, 3), (38, 5), (42, 0), (35, 16), (39,
                                                                    22), (14, 48), (27, 37), (21, 60), (12, 68),
                    (2, 97)
                ),
                (
                    (11, 28), (2, 40), (3, 44), (0, 49), (0, 46), (2,
                                                                   44), (2, 51), (0, 47), (4, 39), (2, 62),
                    (6, 46), (0, 54), (3, 54), (2, 58), (4, 63), (6,
                                                                  51), (6, 57), (7, 53), (6, 52), (6, 55),
                    (11, 45), (14, 36), (8, 53), (-1, 82), (7, 55), (-3,
                                                                     78), (15, 46), (22, 31), (-1, 84), (25, 7),
                    (30, -7), (28, 3), (28, 4), (32, 0), (34, -
                                                          1), (30, 6), (30, 6), (32, 9), (31, 19), (26, 27),
                    (26, 30), (37, 20), (28, 34), (17, 70), (1, 67), (5,
                                                                      59), (9, 67), (16, 30), (18, 32), (18, 35),
                    (22, 29), (24, 31), (23, 38), (18, 43), (20,
                                                             41), (11, 63), (9, 59), (9, 64), (-1, 94), (-2, 89),
                    (-9, 108)
                ),
                (
                    (4, 45), (10, 28), (10, 31), (33, -11), (52, -
                                                             43), (18, 15), (28, 0), (35, -22), (38, -25), (34, 0),
                    (39, -18), (32, -12), (102, -94), (0, 0), (56, -
                                                               15), (33, -4), (29, 10), (37, -5), (51, -29), (39, -9),
                    (52, -34), (69, -58), (67, -63), (44, -5), (32,
                                                                7), (55, -29), (32, 1), (0, 0), (27, 36), (33, -25),
                    (34, -30), (36, -28), (38, -28), (38, -27), (34, -
                                                                 18), (35, -16), (34, -14), (32, -8), (37, -6), (35, 0),
                    (30, 10), (28, 18), (26, 25), (29, 41), (0, 75), (2,
                                                                      72), (8, 77), (14, 35), (18, 31), (17, 35),
                    (21, 30), (17, 45), (20, 42), (18, 45), (27,
                                                             26), (16, 54), (7, 66), (16, 56), (11, 73), (10, 67),
                    (-10, 116)
                ),
                (
                    (4, 39), (0, 42), (7, 34), (11, 29), (8, 31), (6,
                                                                   37), (7, 42), (3, 40), (8, 33), (13, 43),
                    (13, 36), (4, 47), (3, 55), (2, 58), (6, 60), (8,
                                                                   44), (11, 44), (14, 42), (7, 48), (4, 56),
                    (4, 52), (13, 37), (9, 49), (19, 58), (10, 48), (12,
                                                                     45), (0, 69), (20, 33), (8, 63), (35, -18),
                    (33, -25), (28, -3), (24, 10), (27, 0), (34, -
                                                             14), (52, -44), (39, -24), (19, 17), (31, 25), (36, 29),
                    (24, 33), (34, 15), (30, 20), (22, 73), (20, 34), (19,
                                                                       31), (27, 44), (19, 16), (15, 36), (15, 36),
                    (21, 28), (25, 21), (30, 20), (31, 12), (27,
                                                             16), (24, 42), (0, 93), (14, 56), (15, 57), (26, 38),
                    (-24, 127)
                )
            )
            if slice_type in (SliceType.I, SliceType.SI):
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 166
        elif ctxIdx >= 227 and ctxIdx <= 275:
            ctxMNIDC = (
                (
                    (-3, 71), (-6, 42), (-5, 50), (-3, 54), (-2,
                                                             62), (0, 58), (1, 63), (-2, 72), (-1, 74), (-9, 91),
                    (-5, 67), (-5, 27), (-3, 39), (-2, 44), (0, 46), (-16,
                                                                      64), (-8, 68), (-10, 78), (-6, 77), (-10, 86),
                    (-12, 92), (-15, 55), (-10, 60), (-6, 62), (-4,
                                                                65), (-12, 73), (-8, 76), (-7, 80), (-9, 88), (-17, 110),
                    (-11, 97), (-20, 84), (-11, 79), (-6, 73), (-4, 74), (-13,
                                                                          86), (-13, 96), (-11, 97), (-19, 117), (-8, 78),
                    (-5, 33), (-4, 48), (-2, 53), (-3, 62), (-13,
                                                             71), (-10, 79), (-12, 86), (-13, 90), (-14, 97)
                ),
                (
                    (-6, 76), (-2, 44), (0, 45), (0, 52), (-3, 64), (-2,
                                                                     59), (-4, 70), (-4, 75), (-8, 82), (-17, 102),
                    (-9, 77), (3, 24), (0, 42), (0, 48), (0, 55), (-6,
                                                                   59), (-7, 71), (-12, 83), (-11, 87), (-30, 119),
                    (1, 58), (-3, 29), (-1, 36), (1, 38), (2, 43), (-6,
                                                                    55), (0, 58), (0, 64), (-3, 74), (-10, 90),
                    (0, 70), (-4, 29), (5, 31), (7, 42), (1, 59), (-2,
                                                                   58), (-3, 72), (-3, 81), (-11, 97), (0, 58),
                    (8, 5), (10, 14), (14, 18), (13, 27), (2,
                                                           40), (0, 58), (-3, 70), (-6, 79), (-8, 85)
                ),
                (
                    (-23, 112), (-15, 71), (-7, 61), (0, 53), (-5, 66), (-11,
                                                                         77), (-9, 80), (-9, 84), (-10, 87), (-34, 127),
                    (-21, 101), (-3, 39), (-5, 53), (-7, 61), (-11, 75), (-15,
                                                                          77), (-17, 91), (-25, 107), (-25, 111), (-28, 122),
                    (-11, 76), (-10, 44), (-10, 52), (-10, 57), (-9,
                                                                 58), (-16, 72), (-7, 69), (-4, 69), (-5, 74), (-9, 86),
                    (2, 66), (-9, 34), (1, 32), (11, 31), (5, 52), (-2,
                                                                    55), (-2, 67), (0, 73), (-8, 89), (3, 52),
                    (7, 4), (10, 8), (17, 8), (16, 19), (3,
                                                         37), (-1, 61), (-5, 73), (-1, 70), (-4, 78)
                ),
                (
                    (-24, 115), (-22, 82), (-9, 62), (0, 53), (0, 59), (-14,
                                                                        85), (-13, 89), (-13, 94), (-11, 92), (-29, 127),
                    (-21, 100), (-14, 57), (-12, 67), (-11, 71), (-10, 77), (-21,
                                                                             85), (-16, 88), (-23, 104), (-15, 98), (-37, 127),
                    (-10, 82), (-8, 48), (-8, 61), (-8, 66), (-7, 70), (-14,
                                                                        75), (-10, 79), (-9, 83), (-12, 92), (-18, 108),
                    (-4, 79), (-22, 69), (-16, 75), (-2, 58), (1, 58), (-13,
                                                                        78), (-9, 83), (-4, 81), (-13, 99), (-13, 81),
                    (-6, 38), (-13, 62), (-6, 58), (-2, 59), (-16,
                                                              73), (-10, 76), (-13, 86), (-9, 83), (-10, 87)
                )
            )
            if slice_type in (SliceType.I, SliceType.SI):
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 227
        elif ctxIdx == 276:
            return (0, 0)
        elif ctxIdx >= 277 and ctxIdx <= 337:
            ctxMNIDC = (
                (
                    (-6, 93), (-6, 84), (-8, 79), (0, 66), (-1, 71), (0,
                                                                      62), (-2, 60), (-2, 59), (-5, 75), (-3, 62),
                    (-4, 58), (-9, 66), (-1, 79), (0, 71), (3, 68), (10,
                                                                     44), (-7, 62), (15, 36), (14, 40), (16, 27),
                    (12, 29), (1, 44), (20, 36), (18, 32), (5, 42), (1,
                                                                     48), (10, 62), (17, 46), (9, 64), (-12, 104),
                    (-11, 97), (-16, 96), (-7, 88), (-8, 85), (-7,
                                                               85), (-9, 85), (-13, 88), (4, 66), (-3, 77), (-3, 76),
                    (-6, 76), (10, 58), (-1, 76), (-1, 83), (-7,
                                                             99), (-14, 95), (2, 95), (0, 76), (-5, 74), (0, 70),
                    (-11, 75), (1, 68), (0, 65), (-14, 73), (3, 62), (4,
                                                                      62), (-1, 68), (-13, 75), (11, 55), (5, 64),
                    (12, 70)
                ),
                (
                    (-13, 106), (-16, 106), (-10, 87), (-21, 114), (-18, 110), (-14,
                                                                                98), (-22, 110), (-21, 106), (-18, 103), (-21, 107),
                    (-23, 108), (-26, 112), (-10, 96), (-12, 95), (-5,
                                                                   91), (-9, 93), (-22, 94), (-5, 86), (9, 67), (-4, 80),
                    (-10, 85), (-1, 70), (7, 60), (9, 58), (5, 61), (12,
                                                                     50), (15, 50), (18, 49), (17, 54), (10, 41),
                    (7, 46), (-1, 51), (7, 49), (8, 52), (9, 41), (6,
                                                                   47), (2, 55), (13, 41), (10, 44), (6, 50),
                    (5, 53), (13, 49), (4, 63), (6, 64), (-2, 69), (-2,
                                                                    59), (6, 70), (10, 44), (9, 31), (12, 43),
                    (3, 53), (14, 34), (10, 38), (-3, 52), (13,
                                                            40), (17, 32), (7, 44), (7, 38), (13, 50), (10, 57),
                    (26, 43)
                ),
                (
                    (-21, 126), (-23, 124), (-20, 110), (-26, 126), (-25, 124), (-17,
                                                                                 105), (-27, 121), (-27, 117), (-17, 102), (-26, 117),
                    (-27, 116), (-33, 122), (-10, 95), (-14, 100), (-8,
                                                                    95), (-17, 111), (-28, 114), (-6, 89), (-2, 80), (-4, 82),
                    (-9, 85), (-8, 81), (-1, 72), (5, 64), (1,
                                                            67), (9, 56), (0, 69), (1, 69), (7, 69), (-7, 69),
                    (-6, 67), (-16, 77), (-2, 64), (2, 61), (-6,
                                                             67), (-3, 64), (2, 57), (-3, 65), (-3, 66), (0, 62),
                    (9, 51), (-1, 66), (-2, 71), (-2, 75), (-1, 70), (-9,
                                                                      72), (14, 60), (16, 37), (0, 47), (18, 35),
                    (11, 37), (12, 41), (10, 41), (2, 48), (12,
                                                            41), (13, 41), (0, 59), (3, 50), (19, 40), (3, 66),
                    (18, 50)
                ),
                (
                    (-22, 127), (-25, 127), (-25, 120), (-27, 127), (-19, 114), (-23,
                                                                                 117), (-25, 118), (-26, 117), (-24, 113), (-28, 118),
                    (-31, 120), (-37, 124), (-10, 94), (-15, 102), (-10,
                                                                    99), (-13, 106), (-50, 127), (-5, 92), (17, 57), (-5, 86),
                    (-13, 94), (-12, 91), (-2, 77), (0, 71), (-1,
                                                              73), (4, 64), (-7, 81), (5, 64), (15, 57), (1, 67),
                    (0, 68), (-10, 67), (1, 68), (0, 77), (2, 64), (0,
                                                                    68), (-5, 78), (7, 55), (5, 59), (2, 65),
                    (14, 54), (15, 44), (5, 60), (2, 70), (-2, 76), (-18,
                                                                     86), (12, 70), (5, 64), (-12, 70), (11, 55),
                    (5, 56), (0, 69), (2, 65), (-6, 74), (5, 54), (7,
                                                                   54), (-6, 76), (-11, 82), (-2, 77), (-2, 77),
                    (25, 42)
                )
            )
            if slice_type in (SliceType.I, SliceType.SI):
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 277
        elif ctxIdx >= 338 and ctxIdx <= 398:
            ctxMNIDC = (
                (
                    (15, 6), (6, 19), (7, 16), (12, 14), (18, 13), (13,
                                                                    11), (13, 15), (15, 16), (12, 23), (13, 23),
                    (15, 20), (14, 26), (14, 44), (17, 40), (17, 47), (24,
                                                                       17), (21, 21), (25, 22), (31, 27), (22, 29),
                    (19, 35), (14, 50), (10, 57), (7, 63), (-2, 77), (-4,
                                                                      82), (-3, 94), (9, 69), (-12, 109), (36, -35),
                    (36, -34), (32, -26), (37, -30), (44, -32), (34, -
                                                                 18), (34, -15), (40, -15), (33, -7), (35, -5), (33, 0),
                    (38, 2), (33, 13), (23, 35), (13, 58), (29, -
                                                            3), (26, 0), (22, 30), (31, -7), (35, -15), (34, -3),
                    (34, 3), (36, -1), (34, 5), (32, 11), (35, 5), (34,
                                                                    12), (39, 11), (30, 29), (34, 26), (29, 39),
                    (19, 66)
                ),
                (
                    (14, 11), (11, 14), (9, 11), (18, 11), (21, 9), (23, -
                                                                     2), (32, -15), (32, -15), (34, -21), (39, -23),
                    (42, -33), (41, -31), (46, -28), (38, -12), (21,
                                                                 29), (45, -24), (53, -45), (48, -26), (65, -43), (43, -19),
                    (39, -10), (30, 9), (18, 26), (20, 27), (0, 57), (-14,
                                                                      82), (-5, 75), (-19, 97), (-35, 125), (27, 0),
                    (28, 0), (31, -4), (27, 6), (34, 8), (30, 10), (24,
                                                                    22), (33, 19), (22, 32), (26, 31), (21, 41),
                    (26, 44), (23, 47), (16, 65), (14, 71), (8, 60), (6,
                                                                      63), (17, 65), (21, 24), (23, 20), (26, 23),
                    (27, 32), (28, 23), (28, 24), (23, 40), (24, 32), (28,
                                                                       29), (23, 42), (19, 57), (22, 53), (22, 61),
                    (11, 86)
                ),
                (
                    (19, -6), (18, -6), (14, 0), (26, -12), (31, -16), (33, -
                                                                        25), (33, -22), (37, -28), (39, -30), (42, -30),
                    (47, -42), (45, -36), (49, -34), (41, -17), (32,
                                                                 9), (69, -71), (63, -63), (66, -64), (77, -74), (54, -39),
                    (52, -35), (41, -10), (36, 0), (40, -1), (30, 14), (28,
                                                                        26), (23, 37), (12, 55), (11, 65), (37, -33),
                    (39, -36), (40, -37), (38, -30), (46, -33), (42, -
                                                                 30), (40, -24), (49, -29), (38, -12), (40, -10), (38, -3),
                    (46, -5), (31, 20), (29, 30), (25, 44), (12, 48), (11,
                                                                       49), (26, 45), (22, 22), (23, 22), (27, 21),
                    (33, 20), (26, 28), (30, 24), (27, 34), (18, 42), (25,
                                                                       39), (18, 50), (12, 70), (21, 54), (14, 71),
                    (11, 83)
                ),
                (
                    (17, -13), (16, -9), (17, -12), (27, -21), (37, -
                                                                30), (41, -40), (42, -41), (48, -47), (39, -32), (46, -40),
                    (52, -51), (46, -41), (52, -39), (43, -19), (32,
                                                                 11), (61, -55), (56, -46), (62, -50), (81, -67), (45, -20),
                    (35, -2), (28, 15), (34, 1), (39, 1), (30, 17), (20,
                                                                     38), (18, 45), (15, 54), (0, 79), (36, -16),
                    (37, -14), (37, -17), (32, 1), (34, 15), (29,
                                                              15), (24, 25), (34, 22), (31, 16), (35, 18), (31, 28),
                    (33, 41), (36, 28), (27, 47), (21, 62), (18, 31), (19,
                                                                       26), (36, 24), (24, 23), (27, 16), (24, 30),
                    (31, 29), (22, 41), (22, 42), (16, 60), (15, 52), (14,
                                                                       60), (3, 78), (-16, 123), (21, 53), (22, 56),
                    (25, 61)
                )
            )

            if slice_type in (SliceType.I, SliceType.SI):
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 338
        elif ctxIdx >= 399 and ctxIdx <= 401:
            ctxMNIDC = (
                (
                    (31, 21), (31, 31), (25, 50)
                ),
                (
                    (12, 40), (11, 51), (14, 59)
                ),
                (
                    (25, 32), (21, 49), (21, 54)
                ),
                (
                    (21, 33), (19, 50), (17, 61)
                )
            )
            if slice_type == SliceType.I:
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 399
        elif ctxIdx >= 402 and ctxIdx <= 459:
            ctxMNIDC = (
                (
                    (-17, 120), (-20, 112), (-18, 114), (-11, 85), (-15,
                                                                    92), (-14, 89), (-26, 71), (-15, 81), (-14, 80), (0, 68),
                    (-14, 70), (-24, 56), (-23, 68), (-24, 50), (-11,
                                                                 74), (23, -13), (26, -13), (40, -15), (49, -14), (44, 3),
                    (45, 6), (44, 34), (33, 54), (19, 82), (-3,
                                                            75), (-1, 23), (1, 34), (1, 43), (0, 54), (-2, 55),
                    (0, 61), (1, 64), (0, 68), (-9, 92), (-14, 106), (-13,
                                                                      97), (-15, 90), (-12, 90), (-18, 88), (-10, 73),
                    (-9, 79), (-14, 86), (-10, 73), (-10, 70), (-10,
                                                                69), (-5, 66), (-9, 64), (-5, 58), (2, 59), (21, -10),
                    (24, -11), (28, -8), (28, -1), (29,
                                                    3), (29, 9), (35, 20), (29, 36), (14, 67)
                ),
                (
                    (-4, 79), (-7, 71), (-5, 69), (-9, 70), (-8, 66), (-10,
                                                                       68), (-19, 73), (-12, 69), (-16, 70), (-15, 67),
                    (-20, 62), (-19, 70), (-16, 66), (-22, 65), (-20,
                                                                 63), (9, -2), (26, -9), (33, -9), (39, -7), (41, -2),
                    (45, 3), (49, 9), (45, 27), (36, 59), (-6, 66), (-7,
                                                                     35), (-7, 42), (-8, 45), (-5, 48), (-12, 56),
                    (-6, 60), (-5, 62), (-8, 66), (-8, 76), (-5, 85), (-6,
                                                                       81), (-10, 77), (-7, 81), (-17, 80), (-18, 73),
                    (-4, 74), (-10, 83), (-9, 71), (-9, 67), (-1,
                                                              61), (-8, 66), (-14, 66), (0, 59), (2, 59), (21, -13),
                    (33, -14), (39, -7), (46, -2), (51,
                                                    2), (60, 6), (61, 17), (55, 34), (42, 62)
                ),
                (
                    (-5, 85), (-6, 81), (-10, 77), (-7, 81), (-17,
                                                              80), (-18, 73), (-4, 74), (-10, 83), (-9, 71), (-9, 67),
                    (-1, 61), (-8, 66), (-14, 66), (0, 59), (2,
                                                             59), (17, -10), (32, -13), (42, -9), (49, -5), (53, 0),
                    (64, 3), (68, 10), (66, 27), (47, 57), (-5, 71), (0,
                                                                      24), (-1, 36), (-2, 42), (-2, 52), (-9, 57),
                    (-6, 63), (-4, 65), (-4, 67), (-7, 82), (-3, 81), (-3,
                                                                       76), (-7, 72), (-6, 78), (-12, 72), (-14, 68),
                    (-3, 70), (-6, 76), (-5, 66), (-5, 62), (0, 57), (-4,
                                                                      61), (-9, 60), (1, 54), (2, 58), (17, -10),
                    (32, -13), (42, -9), (49, -5), (53,
                                                    0), (64, 3), (68, 10), (66, 27), (47, 57)
                ),
                (
                    (-3, 78), (-8, 74), (-9, 72), (-10, 72), (-18, 75), (-12,
                                                                         71), (-11, 63), (-5, 70), (-17, 75), (-14, 72),
                    (-16, 67), (-8, 53), (-14, 59), (-9, 52), (-11,
                                                               68), (9, -2), (30, -10), (31, -4), (33, -1), (33, 7),
                    (31, 12), (37, 23), (31, 38), (20, 64), (-9, 71), (-7,
                                                                       37), (-8, 44), (-11, 49), (-10, 56), (-12, 59),
                    (-8, 63), (-9, 67), (-6, 68), (-10, 79), (-3, 78), (-8,
                                                                        74), (-9, 72), (-10, 72), (-18, 75), (-12, 71),
                    (-11, 63), (-5, 70), (-17, 75), (-14, 72), (-16,
                                                                67), (-8, 53), (-14, 59), (-9, 52), (-11, 68), (9, -2),
                    (30, -10), (31, -4), (33, -1), (33,
                                                    7), (31, 12), (37, 23), (31, 38), (20, 64)
                )
            )

            if slice_type == SliceType.I:
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 402
        elif ctxIdx >= 460 and ctxIdx <= 483:
            ctxMNIDC = (
                (
                    (-17, 123), (-12, 115), (-16, 122), (-11, 115), (-12,
                                                                     63), (-2, 68), (-15, 84), (-13, 104), (-3, 70), (-8, 93),
                    (-10, 90), (-30, 127), (-17, 123), (-12, 115), (-16,
                                                                    122), (-11, 115), (-12, 63), (-2, 68), (-15, 84), (-13, 104),
                    (-3, 70), (-8, 93), (-10, 90), (-30, 127)
                ),
                (
                    (-7, 92), (-5, 89), (-7, 96), (-13, 108), (-3,
                                                               46), (-1, 65), (-1, 57), (-9, 93), (-3, 74), (-9, 92),
                    (-8, 87), (-23, 126), (-7, 92), (-5, 89), (-7,
                                                               96), (-13, 108), (-3, 46), (-1, 65), (-1, 57), (-9, 93),
                    (-3, 74), (-9, 92), (-8, 87), (-23, 126)
                ),
                (
                    (0, 80), (-5, 89), (-7, 94), (-4, 92), (0, 39), (0,
                                                                     65), (-15, 84), (-35, 127), (-2, 73), (-12, 104),
                    (-9, 91), (-31, 127), (0, 80), (-5, 89), (-7, 94), (-4,
                                                                        92), (0, 39), (0, 65), (-15, 84), (-35, 127),
                    (-2, 73), (-12, 104), (-9, 91), (-31, 127)
                ),
                (
                    (11, 80), (5, 76), (2, 84), (5, 78), (-6, 55), (4,
                                                                    61), (-14, 83), (-37, 127), (-5, 79), (-11, 104),
                    (-11, 91), (-30, 127), (11, 80), (5, 76), (2, 84), (5,
                                                                        78), (-6, 55), (4, 61), (-14, 83), (-37, 127),
                    (-5, 79), (-11, 104), (-11, 91), (-30, 127)
                )
            )

            if slice_type in (SliceType.I, SliceType.SI):
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 460
        elif ctxIdx >= 484 and ctxIdx <= 571:
            ctxMNIDC = (
                (
                    (-7, 93), (-11, 87), (-3, 77), (-5, 71), (-4,
                                                              63), (-4, 68), (-12, 84), (-7, 62), (-7, 65), (8, 61),
                    (5, 56), (-2, 66), (1, 64), (0, 61), (-2, 78), (1,
                                                                    50), (7, 52), (10, 35), (0, 44), (11, 38),
                    (1, 45), (0, 46), (5, 44), (31, 17), (1, 51), (7,
                                                                   50), (28, 19), (16, 33), (14, 62), (-13, 108),
                    (-15, 100), (-13, 101), (-13, 91), (-12, 94), (-10,
                                                                   88), (-16, 84), (-10, 86), (-7, 83), (-13, 87), (-19, 94),
                    (1, 70), (0, 72), (-5, 74), (18, 59), (-7, 93), (-11,
                                                                     87), (-3, 77), (-5, 71), (-4, 63), (-4, 68),
                    (-12, 84), (-7, 62), (-7, 65), (8, 61), (5,
                                                             56), (-2, 66), (1, 64), (0, 61), (-2, 78), (1, 50),
                    (7, 52), (10, 35), (0, 44), (11, 38), (1, 45), (0,
                                                                    46), (5, 44), (31, 17), (1, 51), (7, 50),
                    (28, 19), (16, 33), (14, 62), (-13, 108), (-15, 100), (-13,
                                                                           101), (-13, 91), (-12, 94), (-10, 88), (-16, 84),
                    (-10, 86), (-7, 83), (-13, 87), (-19,
                                                     94), (1, 70), (0, 72), (-5, 74), (18, 59)
                ),
                (
                    (-2, 85), (-6, 78), (-1, 75), (-7, 77), (2,
                                                             54), (5, 50), (-3, 68), (1, 50), (6, 42), (-4, 81),
                    (1, 63), (-4, 70), (0, 67), (2, 57), (-2, 76), (11,
                                                                    35), (4, 64), (1, 61), (11, 35), (18, 25),
                    (12, 24), (13, 29), (13, 36), (-10, 93), (-7,
                                                              73), (-2, 73), (13, 46), (9, 49), (-7, 100), (9, 53),
                    (2, 53), (5, 53), (-2, 61), (0, 56), (0, 56), (-13,
                                                                   63), (-5, 60), (-1, 62), (4, 57), (-6, 69),
                    (4, 57), (14, 39), (4, 51), (13, 68), (-2, 85), (-6,
                                                                     78), (-1, 75), (-7, 77), (2, 54), (5, 50),
                    (-3, 68), (1, 50), (6, 42), (-4, 81), (1, 63), (-4,
                                                                    70), (0, 67), (2, 57), (-2, 76), (11, 35),
                    (4, 64), (1, 61), (11, 35), (18, 25), (12, 24), (13,
                                                                     29), (13, 36), (-10, 93), (-7, 73), (-2, 73),
                    (13, 46), (9, 49), (-7, 100), (9, 53), (2, 53), (5,
                                                                     53), (-2, 61), (0, 56), (0, 56), (-13, 63),
                    (-5, 60), (-1, 62), (4, 57), (-6,
                                                  69), (4, 57), (14, 39), (4, 51), (13, 68)

                ),
                (
                    (-13, 103), (-13, 91), (-9, 89), (-14, 92), (-8, 76), (-12,
                                                                           87), (-23, 110), (-24, 105), (-10, 78), (-20, 112),
                    (-17, 99), (-78, 127), (-70, 127), (-50, 127), (-46,
                                                                    127), (-4, 66), (-5, 78), (-4, 71), (-8, 72), (2, 59),
                    (-1, 55), (-7, 70), (-6, 75), (-8, 89), (-34, 119), (-3,
                                                                         75), (32, 20), (30, 22), (-44, 127), (0, 54),
                    (-5, 61), (0, 58), (-1, 60), (-3, 61), (-8, 67), (-25,
                                                                      84), (-14, 74), (-5, 65), (5, 52), (2, 57),
                    (0, 61), (-9, 69), (-11, 70), (18, 55), (-13, 103), (-13,
                                                                         91), (-9, 89), (-14, 92), (-8, 76), (-12, 87),
                    (-23, 110), (-24, 105), (-10, 78), (-20, 112), (-17,
                                                                    99), (-78, 127), (-70, 127), (-50, 127), (-46, 127), (-4, 66),
                    (-5, 78), (-4, 71), (-8, 72), (2, 59), (-1, 55), (-7,
                                                                      70), (-6, 75), (-8, 89), (-34, 119), (-3, 75),
                    (32, 20), (30, 22), (-44, 127), (0, 54), (-5, 61), (0,
                                                                        58), (-1, 60), (-3, 61), (-8, 67), (-25, 84),
                    (-14, 74), (-5, 65), (5, 52), (2, 57), (0,
                                                            61), (-9, 69), (-11, 70), (18, 55)
                ),
                (
                    (-4, 86), (-12, 88), (-5, 82), (-3, 72), (-4,
                                                              67), (-8, 72), (-16, 89), (-9, 69), (-1, 59), (5, 66),
                    (4, 57), (-4, 71), (-2, 71), (2, 58), (-1, 74), (-4,
                                                                     44), (-1, 69), (0, 62), (-7, 51), (-4, 47),
                    (-6, 42), (-3, 41), (-6, 53), (8, 76), (-9,
                                                            78), (-11, 83), (9, 52), (0, 67), (-5, 90), (1, 67),
                    (-15, 72), (-5, 75), (-8, 80), (-21, 83), (-21,
                                                               64), (-13, 31), (-25, 64), (-29, 94), (9, 75), (17, 63),
                    (-8, 74), (-5, 35), (-2, 27), (13, 91), (-4, 86), (-12,
                                                                       88), (-5, 82), (-3, 72), (-4, 67), (-8, 72),
                    (-16, 89), (-9, 69), (-1, 59), (5, 66), (4, 57), (-4,
                                                                      71), (-2, 71), (2, 58), (-1, 74), (-4, 44),
                    (-1, 69), (0, 62), (-7, 51), (-4, 47), (-6, 42), (-3,
                                                                      41), (-6, 53), (8, 76), (-9, 78), (-11, 83),
                    (9, 52), (0, 67), (-5, 90), (1, 67), (-15, 72), (-5,
                                                                     75), (-8, 80), (-21, 83), (-21, 64), (-13, 31),
                    (-25, 64), (-29, 94), (9, 75), (17,
                                                    63), (-8, 74), (-5, 35), (-2, 27), (13, 91)
                )
            )

            if slice_type in (SliceType.I, SliceType.SI):
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 484
        elif ctxIdx >= 572 and ctxIdx <= 659:
            ctxMNIDC = (
                (
                    (24, 0), (15, 9), (8, 25), (13, 18), (15, 9), (13,
                                                                   19), (10, 37), (12, 18), (6, 29), (20, 33),
                    (15, 30), (4, 45), (1, 58), (0, 62), (7, 61), (12,
                                                                   38), (11, 45), (15, 39), (11, 42), (13, 44),
                    (16, 45), (12, 41), (10, 49), (30, 34), (18, 42), (10,
                                                                       55), (17, 51), (17, 46), (0, 89), (26, -19),
                    (22, -17), (26, -17), (30, -25), (28, -20), (33, -
                                                                 23), (37, -27), (33, -23), (40, -28), (38, -17), (33, -11),
                    (40, -15), (41, -6), (38, 1), (41, 17), (24,
                                                             0), (15, 9), (8, 25), (13, 18), (15, 9), (13, 19),
                    (10, 37), (12, 18), (6, 29), (20, 33), (15,
                                                            30), (4, 45), (1, 58), (0, 62), (7, 61), (12, 38),
                    (11, 45), (15, 39), (11, 42), (13, 44), (16, 45), (12,
                                                                       41), (10, 49), (30, 34), (18, 42), (10, 55),
                    (17, 51), (17, 46), (0, 89), (26, -19), (22, -17), (26, -
                                                                        17), (30, -25), (28, -20), (33, -23), (37, -27),
                    (33, -23), (40, -28), (38, -17), (33, -
                                                      11), (40, -15), (41, -6), (38, 1), (41, 17)
                ),
                (
                    (11, 28), (2, 40), (3, 44), (0, 49), (0, 46), (2,
                                                                   44), (2, 51), (0, 47), (4, 39), (2, 62),
                    (6, 46), (0, 54), (3, 54), (2, 58), (4, 63), (6,
                                                                  51), (6, 57), (7, 53), (6, 52), (6, 55),
                    (11, 45), (14, 36), (8, 53), (-1, 82), (7, 55), (-3,
                                                                     78), (15, 46), (22, 31), (-1, 84), (25, 7),
                    (30, -7), (28, 3), (28, 4), (32, 0), (34, -
                                                          1), (30, 6), (30, 6), (32, 9), (31, 19), (26, 27),
                    (26, 30), (37, 20), (28, 34), (17, 70), (11,
                                                             28), (2, 40), (3, 44), (0, 49), (0, 46), (2, 44),
                    (2, 51), (0, 47), (4, 39), (2, 62), (6, 46), (0,
                                                                  54), (3, 54), (2, 58), (4, 63), (6, 51),
                    (6, 57), (7, 53), (6, 52), (6, 55), (11, 45), (14,
                                                                   36), (8, 53), (-1, 82), (7, 55), (-3, 78),
                    (15, 46), (22, 31), (-1, 84), (25, 7), (30, -
                                                            7), (28, 3), (28, 4), (32, 0), (34, -1), (30, 6),
                    (30, 6), (32, 9), (31, 19), (26, 27), (26,
                                                           30), (37, 20), (28, 34), (17, 70)
                ),
                (
                    (4, 45), (10, 28), (10, 31), (33, -11), (52, -
                                                             43), (18, 15), (28, 0), (35, -22), (38, -25), (34, 0),
                    (39, -18), (32, -12), (102, -94), (0, 0), (56, -
                                                               15), (33, -4), (29, 10), (37, -5), (51, -29), (39, -9),
                    (52, -34), (69, -58), (67, -63), (44, -5), (32,
                                                                7), (55, -29), (32, 1), (0, 0), (27, 36), (33, -25),
                    (34, -30), (36, -28), (38, -28), (38, -27), (34, -
                                                                 18), (35, -16), (34, -14), (32, -8), (37, -6), (35, 0),
                    (30, 10), (28, 18), (26, 25), (29, 41), (4, 45), (10,
                                                                      28), (10, 31), (33, -11), (52, -43), (18, 15),
                    (28, 0), (35, -22), (38, -25), (34, 0), (39, -
                                                             18), (32, -12), (102, -94), (0, 0), (56, -15), (33, -4),
                    (29, 10), (37, -5), (51, -29), (39, -9), (52, -
                                                              34), (69, -58), (67, -63), (44, -5), (32, 7), (55, -29),
                    (32, 1), (0, 0), (27, 36), (33, -25), (34, -30), (36, -
                                                                      28), (38, -28), (38, -27), (34, -18), (35, -16),
                    (34, -14), (32, -8), (37, -6), (35,
                                                    0), (30, 10), (28, 18), (26, 25), (29, 41)
                ),
                (
                    (4, 39), (0, 42), (7, 34), (11, 29), (8, 31), (6,
                                                                   37), (7, 42), (3, 40), (8, 33), (13, 43),
                    (13, 36), (4, 47), (3, 55), (2, 58), (6, 60), (8,
                                                                   44), (11, 44), (14, 42), (7, 48), (4, 56),
                    (4, 52), (13, 37), (9, 49), (19, 58), (10, 48), (12,
                                                                     45), (0, 69), (20, 33), (8, 63), (35, -18),
                    (33, -25), (28, -3), (24, 10), (27, 0), (34, -
                                                             14), (52, -44), (39, -24), (19, 17), (31, 25), (36, 29),
                    (24, 33), (34, 15), (30, 20), (22, 73), (4,
                                                             39), (0, 42), (7, 34), (11, 29), (8, 31), (6, 37),
                    (7, 42), (3, 40), (8, 33), (13, 43), (13,
                                                          36), (4, 47), (3, 55), (2, 58), (6, 60), (8, 44),
                    (11, 44), (14, 42), (7, 48), (4, 56), (4, 52), (13,
                                                                    37), (9, 49), (19, 58), (10, 48), (12, 45),
                    (0, 69), (20, 33), (8, 63), (35, -18), (33, -
                                                            25), (28, -3), (24, 10), (27, 0), (34, -14), (52, -44),
                    (39, -24), (19, 17), (31, 25), (36,
                                                    29), (24, 33), (34, 15), (30, 20), (22, 73)
                )
            )

            if slice_type in (SliceType.I, SliceType.SI):
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 572
        elif ctxIdx >= 660 and ctxIdx <= 717:
            ctxMNIDC = (
                (
                    (-17, 120), (-20, 112), (-18, 114), (-11, 85), (-15,
                                                                    92), (-14, 89), (-26, 71), (-15, 81), (-14, 80), (0, 68),
                    (-14, 70), (-24, 56), (-23, 68), (-24, 50), (-11, 74), (-14,
                                                                            106), (-13, 97), (-15, 90), (-12, 90), (-18, 88),
                    (-10, 73), (-9, 79), (-14, 86), (-10, 73), (-10,
                                                                70), (-10, 69), (-5, 66), (-9, 64), (-5, 58), (2, 59),
                    (23, -13), (26, -13), (40, -15), (49, -14), (44,
                                                                 3), (45, 6), (44, 34), (33, 54), (19, 82), (21, -10),
                    (24, -11), (28, -8), (28, -1), (29, 3), (29, 9), (35,
                                                                      20), (29, 36), (14, 67), (-3, 75), (-1, 23),
                    (1, 34), (1, 43), (0, 54), (-2, 55), (0,
                                                          61), (1, 64), (0, 68), (-9, 92)
                ),
                (
                    (-4, 79), (-7, 71), (-5, 69), (-9, 70), (-8, 66), (-10,
                                                                       68), (-19, 73), (-12, 69), (-16, 70), (-15, 67),
                    (-20, 62), (-19, 70), (-16, 66), (-22, 65), (-20,
                                                                 63), (-5, 85), (-6, 81), (-10, 77), (-7, 81), (-17, 80),
                    (-18, 73), (-4, 74), (-10, 83), (-9, 71), (-9,
                                                               67), (-1, 61), (-8, 66), (-14, 66), (0, 59), (2, 59),
                    (9, -2), (26, -9), (33, -9), (39, -7), (41, -
                                                            2), (45, 3), (49, 9), (45, 27), (36, 59), (21, -13),
                    (33, -14), (39, -7), (46, -2), (51, 2), (60, 6), (61,
                                                                      17), (55, 34), (42, 62), (-6, 66), (-7, 35),
                    (-7, 42), (-8, 45), (-5, 48), (-12,
                                                   56), (-6, 60), (-5, 62), (-8, 66), (-8, 76)
                ),
                (
                    (-5, 85), (-6, 81), (-10, 77), (-7, 81), (-17,
                                                              80), (-18, 73), (-4, 74), (-10, 83), (-9, 71), (-9, 67),
                    (-1, 61), (-8, 66), (-14, 66), (0, 59), (2, 59), (-3,
                                                                      81), (-3, 76), (-7, 72), (-6, 78), (-12, 72),
                    (-14, 68), (-3, 70), (-6, 76), (-5, 66), (-5,
                                                              62), (0, 57), (-4, 61), (-9, 60), (1, 54), (2, 58),
                    (17, -10), (32, -13), (42, -9), (49, -5), (53,
                                                               0), (64, 3), (68, 10), (66, 27), (47, 57), (17, -10),
                    (32, -13), (42, -9), (49, -5), (53, 0), (64,
                                                             3), (68, 10), (66, 27), (47, 57), (-5, 71), (0, 24),
                    (-1, 36), (-2, 42), (-2, 52), (-9,
                                                   57), (-6, 63), (-4, 65), (-4, 67), (-7, 82)
                ),
                (
                    (-3, 78), (-8, 74), (-9, 72), (-10, 72), (-18, 75), (-12,
                                                                         71), (-11, 63), (-5, 70), (-17, 75), (-14, 72),
                    (-16, 67), (-8, 53), (-14, 59), (-9, 52), (-11,
                                                               68), (-3, 78), (-8, 74), (-9, 72), (-10, 72), (-18, 75),
                    (-12, 71), (-11, 63), (-5, 70), (-17, 75), (-14,
                                                                72), (-16, 67), (-8, 53), (-14, 59), (-9, 52), (-11, 68),
                    (9, -2), (30, -10), (31, -4), (33, -1), (33,
                                                             7), (31, 12), (37, 23), (31, 38), (20, 64), (9, -2),
                    (30, -10), (31, -4), (33, -1), (33, 7), (31, 12), (37,
                                                                       23), (31, 38), (20, 64), (-9, 71), (-7, 37),
                    (-8, 44), (-11, 49), (-10, 56), (-12,
                                                     59), (-8, 63), (-9, 67), (-6, 68), (-10, 79)
                )
            )

            if slice_type == SliceType.I:
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 660
        elif ctxIdx >= 718 and ctxIdx <= 775:
            ctxMNIDC = (
                (
                    (-17, 120), (-20, 112), (-18, 114), (-11, 85), (-15,
                                                                    92), (-14, 89), (-26, 71), (-15, 81), (-14, 80), (0, 68),
                    (-14, 70), (-24, 56), (-23, 68), (-24, 50), (-11, 74), (-14,
                                                                            106), (-13, 97), (-15, 90), (-12, 90), (-18, 88),
                    (-10, 73), (-9, 79), (-14, 86), (-10, 73), (-10,
                                                                70), (-10, 69), (-5, 66), (-9, 64), (-5, 58), (2, 59),
                    (23, -13), (26, -13), (40, -15), (49, -14), (44,
                                                                 3), (45, 6), (44, 34), (33, 54), (19, 82), (21, -10),
                    (24, -11), (28, -8), (28, -1), (29, 3), (29, 9), (35,
                                                                      20), (29, 36), (14, 67), (-3, 75), (-1, 23),
                    (1, 34), (1, 43), (0, 54), (-2, 55), (0,
                                                          61), (1, 64), (0, 68), (-9, 92)
                ),
                (
                    (-4, 79), (-7, 71), (-5, 69), (-9, 70), (-8, 66), (-10,
                                                                       68), (-19, 73), (-12, 69), (-16, 70), (-15, 67),
                    (-20, 62), (-19, 70), (-16, 66), (-22, 65), (-20,
                                                                 63), (-5, 85), (-6, 81), (-10, 77), (-7, 81), (-17, 80),
                    (-18, 73), (-4, 74), (-10, 83), (-9, 71), (-9,
                                                               67), (-1, 61), (-8, 66), (-14, 66), (0, 59), (2, 59),
                    (9, -2), (26, -9), (33, -9), (39, -7), (41, -
                                                            2), (45, 3), (49, 9), (45, 27), (36, 59), (21, -13),
                    (33, -14), (39, -7), (46, -2), (51, 2), (60, 6), (61,
                                                                      17), (55, 34), (42, 62), (-6, 66), (-7, 35),
                    (-7, 42), (-8, 45), (-5, 48), (-12,
                                                   56), (-6, 60), (-5, 62), (-8, 66), (-8, 76)
                ),
                (
                    (-5, 85), (-6, 81), (-10, 77), (-7, 81), (-17,
                                                              80), (-18, 73), (-4, 74), (-10, 83), (-9, 71), (-9, 67),
                    (-1, 61), (-8, 66), (-14, 66), (0, 59), (2, 59), (-3,
                                                                      81), (-3, 76), (-7, 72), (-6, 78), (-12, 72),
                    (-14, 68), (-3, 70), (-6, 76), (-5, 66), (-5,
                                                              62), (0, 57), (-4, 61), (-9, 60), (1, 54), (2, 58),
                    (17, -10), (32, -13), (42, -9), (49, -5), (53,
                                                               0), (64, 3), (68, 10), (66, 27), (47, 57), (17, -10),
                    (32, -13), (42, -9), (49, -5), (53, 0), (64,
                                                             3), (68, 10), (66, 27), (47, 57), (-5, 71), (0, 24),
                    (-1, 36), (-2, 42), (-2, 52), (-9,
                                                   57), (-6, 63), (-4, 65), (-4, 67), (-7, 82)
                ),
                (
                    (-3, 78), (-8, 74), (-9, 72), (-10, 72), (-18, 75), (-12,
                                                                         71), (-11, 63), (-5, 70), (-17, 75), (-14, 72),
                    (-16, 67), (-8, 53), (-14, 59), (-9, 52), (-11,
                                                               68), (-3, 78), (-8, 74), (-9, 72), (-10, 72), (-18, 75),
                    (-12, 71), (-11, 63), (-5, 70), (-17, 75), (-14,
                                                                72), (-16, 67), (-8, 53), (-14, 59), (-9, 52), (-11, 68),
                    (9, -2), (30, -10), (31, -4), (33, -1), (33,
                                                             7), (31, 12), (37, 23), (31, 38), (20, 64), (9, -2),
                    (30, -10), (31, -4), (33, -1), (33, 7), (31, 12), (37,
                                                                       23), (31, 38), (20, 64), (-9, 71), (-7, 37),
                    (-8, 44), (-11, 49), (-10, 56), (-12,
                                                     59), (-8, 63), (-9, 67), (-6, 68), (-10, 79)
                )
            )

            if slice_type == SliceType.I:
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 718
        elif ctxIdx >= 776 and ctxIdx <= 863:
            ctxMNIDC = (
                (
                    (-6, 93), (-6, 84), (-8, 79), (0, 66), (-1, 71), (0,
                                                                      62), (-2, 60), (-2, 59), (-5, 75), (-3, 62),
                    (-4, 58), (-9, 66), (-1, 79), (0, 71), (3, 68), (10,
                                                                     44), (-7, 62), (15, 36), (14, 40), (16, 27),
                    (12, 29), (1, 44), (20, 36), (18, 32), (5, 42), (1,
                                                                     48), (10, 62), (17, 46), (9, 64), (-12, 104),
                    (-11, 97), (-16, 96), (-7, 88), (-8, 85), (-7,
                                                               85), (-9, 85), (-13, 88), (4, 66), (-3, 77), (-3, 76),
                    (-6, 76), (10, 58), (-1, 76), (-1, 83), (-6,
                                                             93), (-6, 84), (-8, 79), (0, 66), (-1, 71), (0, 62),
                    (-2, 60), (-2, 59), (-5, 75), (-3, 62), (-4,
                                                             58), (-9, 66), (-1, 79), (0, 71), (3, 68), (10, 44),
                    (-7, 62), (15, 36), (14, 40), (16, 27), (12,
                                                             29), (1, 44), (20, 36), (18, 32), (5, 42), (1, 48),
                    (10, 62), (17, 46), (9, 64), (-12, 104), (-11,
                                                              97), (-16, 96), (-7, 88), (-8, 85), (-7, 85), (-9, 85),
                    (-13, 88), (4, 66), (-3, 77), (-3,
                                                   76), (-6, 76), (10, 58), (-1, 76), (-1, 83)
                ),
                (
                    (-13, 106), (-16, 106), (-10, 87), (-21, 114), (-18, 110), (-14,
                                                                                98), (-22, 110), (-21, 106), (-18, 103), (-21, 107),
                    (-23, 108), (-26, 112), (-10, 96), (-12, 95), (-5,
                                                                   91), (-9, 93), (-22, 94), (-5, 86), (9, 67), (-4, 80),
                    (-10, 85), (-1, 70), (7, 60), (9, 58), (5, 61), (12,
                                                                     50), (15, 50), (18, 49), (17, 54), (10, 41),
                    (7, 46), (-1, 51), (7, 49), (8, 52), (9, 41), (6,
                                                                   47), (2, 55), (13, 41), (10, 44), (6, 50),
                    (5, 53), (13, 49), (4, 63), (6, 64), (-13, 106), (-16,
                                                                      106), (-10, 87), (-21, 114), (-18, 110), (-14, 98),
                    (-22, 110), (-21, 106), (-18, 103), (-21, 107), (-23,
                                                                     108), (-26, 112), (-10, 96), (-12, 95), (-5, 91), (-9, 93),
                    (-22, 94), (-5, 86), (9, 67), (-4, 80), (-10,
                                                             85), (-1, 70), (7, 60), (9, 58), (5, 61), (12, 50),
                    (15, 50), (18, 49), (17, 54), (10, 41), (7,
                                                             46), (-1, 51), (7, 49), (8, 52), (9, 41), (6, 47),
                    (2, 55), (13, 41), (10, 44), (6,
                                                  50), (5, 53), (13, 49), (4, 63), (6, 64)
                ),
                (
                    (-21, 126), (-23, 124), (-20, 110), (-26, 126), (-25, 124), (-17,
                                                                                 105), (-27, 121), (-27, 117), (-17, 102), (-26, 117),
                    (-27, 116), (-33, 122), (-10, 95), (-14, 100), (-8,
                                                                    95), (-17, 111), (-28, 114), (-6, 89), (-2, 80), (-4, 82),
                    (-9, 85), (-8, 81), (-1, 72), (5, 64), (1,
                                                            67), (9, 56), (0, 69), (1, 69), (7, 69), (-7, 69),
                    (-6, 67), (-16, 77), (-2, 64), (2, 61), (-6,
                                                             67), (-3, 64), (2, 57), (-3, 65), (-3, 66), (0, 62),
                    (9, 51), (-1, 66), (-2, 71), (-2, 75), (-21, 126), (-23,
                                                                        124), (-20, 110), (-26, 126), (-25, 124), (-17, 105),
                    (-27, 121), (-27, 117), (-17, 102), (-26, 117), (-27,
                                                                     116), (-33, 122), (-10, 95), (-14, 100), (-8, 95), (-17, 111),
                    (-28, 114), (-6, 89), (-2, 80), (-4, 82), (-9,
                                                               85), (-8, 81), (-1, 72), (5, 64), (1, 67), (9, 56),
                    (0, 69), (1, 69), (7, 69), (-7, 69), (-6, 67), (-16,
                                                                    77), (-2, 64), (2, 61), (-6, 67), (-3, 64),
                    (2, 57), (-3, 65), (-3, 66), (0, 62), (9,
                                                           51), (-1, 66), (-2, 71), (-2, 75)
                ),
                (
                    (-22, 127), (-25, 127), (-25, 120), (-27, 127), (-19, 114), (-23,
                                                                                 117), (-25, 118), (-26, 117), (-24, 113), (-28, 118),
                    (-31, 120), (-37, 124), (-10, 94), (-15, 102), (-10,
                                                                    99), (-13, 106), (-50, 127), (-5, 92), (17, 57), (-5, 86),
                    (-13, 94), (-12, 91), (-2, 77), (0, 71), (-1,
                                                              73), (4, 64), (-7, 81), (5, 64), (15, 57), (1, 67),
                    (0, 68), (-10, 67), (1, 68), (0, 77), (2, 64), (0,
                                                                    68), (-5, 78), (7, 55), (5, 59), (2, 65),
                    (14, 54), (15, 44), (5, 60), (2, 70), (-22, 127), (-25,
                                                                       127), (-25, 120), (-27, 127), (-19, 114), (-23, 117),
                    (-25, 118), (-26, 117), (-24, 113), (-28, 118), (-31,
                                                                     120), (-37, 124), (-10, 94), (-15, 102), (-10, 99), (-13, 106),
                    (-50, 127), (-5, 92), (17, 57), (-5, 86), (-13,
                                                               94), (-12, 91), (-2, 77), (0, 71), (-1, 73), (4, 64),
                    (-7, 81), (5, 64), (15, 57), (1, 67), (0,
                                                           68), (-10, 67), (1, 68), (0, 77), (2, 64), (0, 68),
                    (-5, 78), (7, 55), (5, 59), (2, 65), (14,
                                                          54), (15, 44), (5, 60), (2, 70)
                )
            )

            if slice_type in (SliceType.I, SliceType.SI):
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 776
        elif ctxIdx >= 864 and ctxIdx <= 951:
            ctxMNIDC = (
                (
                    (15, 6), (6, 19), (7, 16), (12, 14), (18, 13), (13,
                                                                    11), (13, 15), (15, 16), (12, 23), (13, 23),
                    (15, 20), (14, 26), (14, 44), (17, 40), (17, 47), (24,
                                                                       17), (21, 21), (25, 22), (31, 27), (22, 29),
                    (19, 35), (14, 50), (10, 57), (7, 63), (-2, 77), (-4,
                                                                      82), (-3, 94), (9, 69), (-12, 109), (36, -35),
                    (36, -34), (32, -26), (37, -30), (44, -32), (34, -
                                                                 18), (34, -15), (40, -15), (33, -7), (35, -5), (33, 0),
                    (38, 2), (33, 13), (23, 35), (13, 58), (15, 6), (6,
                                                                     19), (7, 16), (12, 14), (18, 13), (13, 11),
                    (13, 15), (15, 16), (12, 23), (13, 23), (15, 20), (14,
                                                                       26), (14, 44), (17, 40), (17, 47), (24, 17),
                    (21, 21), (25, 22), (31, 27), (22, 29), (19,
                                                             35), (14, 50), (10, 57), (7, 63), (-2, 77), (-4, 82),
                    (-3, 94), (9, 69), (-12, 109), (36, -35), (36, -
                                                               34), (32, -26), (37, -30), (44, -32), (34, -18), (34, -15),
                    (40, -15), (33, -7), (35, -5), (33,
                                                    0), (38, 2), (33, 13), (23, 35), (13, 58)
                ),
                (
                    (14, 11), (11, 14), (9, 11), (18, 11), (21, 9), (23, -
                                                                     2), (32, -15), (32, -15), (34, -21), (39, -23),
                    (42, -33), (41, -31), (46, -28), (38, -12), (21,
                                                                 29), (45, -24), (53, -45), (48, -26), (65, -43), (43, -19),
                    (39, -10), (30, 9), (18, 26), (20, 27), (0, 57), (-14,
                                                                      82), (-5, 75), (-19, 97), (-35, 125), (27, 0),
                    (28, 0), (31, -4), (27, 6), (34, 8), (30, 10), (24,
                                                                    22), (33, 19), (22, 32), (26, 31), (21, 41),
                    (26, 44), (23, 47), (16, 65), (14, 71), (14,
                                                             11), (11, 14), (9, 11), (18, 11), (21, 9), (23, -2),
                    (32, -15), (32, -15), (34, -21), (39, -23), (42, -
                                                                 33), (41, -31), (46, -28), (38, -12), (21, 29), (45, -24),
                    (53, -45), (48, -26), (65, -43), (43, -19), (39, -
                                                                 10), (30, 9), (18, 26), (20, 27), (0, 57), (-14, 82),
                    (-5, 75), (-19, 97), (-35, 125), (27, 0), (28,
                                                               0), (31, -4), (27, 6), (34, 8), (30, 10), (24, 22),
                    (33, 19), (22, 32), (26, 31), (21,
                                                   41), (26, 44), (23, 47), (16, 65), (14, 71)
                ),
                (
                    (19, -6), (18, -6), (14, 0), (26, -12), (31, -16), (33, -
                                                                        25), (33, -22), (37, -28), (39, -30), (42, -30),
                    (47, -42), (45, -36), (49, -34), (41, -17), (32,
                                                                 9), (69, -71), (63, -63), (66, -64), (77, -74), (54, -39),
                    (52, -35), (41, -10), (36, 0), (40, -1), (30, 14), (28,
                                                                        26), (23, 37), (12, 55), (11, 65), (37, -33),
                    (39, -36), (40, -37), (38, -30), (46, -33), (42, -
                                                                 30), (40, -24), (49, -29), (38, -12), (40, -10), (38, -3),
                    (46, -5), (31, 20), (29, 30), (25, 44), (19, -
                                                             6), (18, -6), (14, 0), (26, -12), (31, -16), (33, -25),
                    (33, -22), (37, -28), (39, -30), (42, -30), (47, -
                                                                 42), (45, -36), (49, -34), (41, -17), (32, 9), (69, -71),
                    (63, -63), (66, -64), (77, -74), (54, -39), (52, -
                                                                 35), (41, -10), (36, 0), (40, -1), (30, 14), (28, 26),
                    (23, 37), (12, 55), (11, 65), (37, -33), (39, -
                                                              36), (40, -37), (38, -30), (46, -33), (42, -30), (40, -24),
                    (49, -29), (38, -12), (40, -10), (38, -
                                                      3), (46, -5), (31, 20), (29, 30), (25, 44)
                ),
                (
                    (17, -13), (16, -9), (17, -12), (27, -21), (37, -
                                                                30), (41, -40), (42, -41), (48, -47), (39, -32), (46, -40),
                    (52, -51), (46, -41), (52, -39), (43, -19), (32,
                                                                 11), (61, -55), (56, -46), (62, -50), (81, -67), (45, -20),
                    (35, -2), (28, 15), (34, 1), (39, 1), (30, 17), (20,
                                                                     38), (18, 45), (15, 54), (0, 79), (36, -16),
                    (37, -14), (37, -17), (32, 1), (34, 15), (29,
                                                              15), (24, 25), (34, 22), (31, 16), (35, 18), (31, 28),
                    (33, 41), (36, 28), (27, 47), (21, 62), (17, -
                                                             13), (16, -9), (17, -12), (27, -21), (37, -30), (41, -40),
                    (42, -41), (48, -47), (39, -32), (46, -40), (52, -
                                                                 51), (46, -41), (52, -39), (43, -19), (32, 11), (61, -55),
                    (56, -46), (62, -50), (81, -67), (45, -20), (35, -
                                                                 2), (28, 15), (34, 1), (39, 1), (30, 17), (20, 38),
                    (18, 45), (15, 54), (0, 79), (36, -16), (37, -
                                                             14), (37, -17), (32, 1), (34, 15), (29, 15), (24, 25),
                    (34, 22), (31, 16), (35, 18), (31,
                                                   28), (33, 41), (36, 28), (27, 47), (21, 62)
                )
            )

            if slice_type in (SliceType.I, SliceType.SI):
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 864
        elif ctxIdx >= 952 and ctxIdx <= 1011:
            ctxMNIDC = (
                (
                    (-3, 71), (-6, 42), (-5, 50), (-3, 54), (-2,
                                                             62), (0, 58), (1, 63), (-2, 72), (-1, 74), (-9, 91),
                    (-5, 67), (-5, 27), (-3, 39), (-2, 44), (0, 46), (-16,
                                                                      64), (-8, 68), (-10, 78), (-6, 77), (-10, 86),
                    (-12, 92), (-15, 55), (-10, 60), (-6, 62), (-4,
                                                                65), (-12, 73), (-8, 76), (-7, 80), (-9, 88), (-17, 110),
                    (-3, 71), (-6, 42), (-5, 50), (-3, 54), (-2,
                                                             62), (0, 58), (1, 63), (-2, 72), (-1, 74), (-9, 91),
                    (-5, 67), (-5, 27), (-3, 39), (-2, 44), (0, 46), (-16,
                                                                      64), (-8, 68), (-10, 78), (-6, 77), (-10, 86),
                    (-12, 92), (-15, 55), (-10, 60), (-6, 62), (-4,
                                                                65), (-12, 73), (-8, 76), (-7, 80), (-9, 88), (-17, 110)
                ),
                (
                    (-6, 76), (-2, 44), (0, 45), (0, 52), (-3, 64), (-2,
                                                                     59), (-4, 70), (-4, 75), (-8, 82), (-17, 102),
                    (-9, 77), (3, 24), (0, 42), (0, 48), (0, 55), (-6,
                                                                   59), (-7, 71), (-12, 83), (-11, 87), (-30, 119),
                    (1, 58), (-3, 29), (-1, 36), (1, 38), (2, 43), (-6,
                                                                    55), (0, 58), (0, 64), (-3, 74), (-10, 90),
                    (-6, 76), (-2, 44), (0, 45), (0, 52), (-3, 64), (-2,
                                                                     59), (-4, 70), (-4, 75), (-8, 82), (-17, 102),
                    (-9, 77), (3, 24), (0, 42), (0, 48), (0, 55), (-6,
                                                                   59), (-7, 71), (-12, 83), (-11, 87), (-30, 119),
                    (1, 58), (-3, 29), (-1, 36), (1, 38), (2, 43), (-6,
                                                                    55), (0, 58), (0, 64), (-3, 74), (-10, 90)
                ),
                (
                    (-23, 112), (-15, 71), (-7, 61), (0, 53), (-5, 66), (-11,
                                                                         77), (-9, 80), (-9, 84), (-10, 87), (-34, 127),
                    (-21, 101), (-3, 39), (-5, 53), (-7, 61), (-11, 75), (-15,
                                                                          77), (-17, 91), (-25, 107), (-25, 111), (-28, 122),
                    (-11, 76), (-10, 44), (-10, 52), (-10, 57), (-9,
                                                                 58), (-16, 72), (-7, 69), (-4, 69), (-5, 74), (-9, 86),
                    (-23, 112), (-15, 71), (-7, 61), (0, 53), (-5, 66), (-11,
                                                                         77), (-9, 80), (-9, 84), (-10, 87), (-34, 127),
                    (-21, 101), (-3, 39), (-5, 53), (-7, 61), (-11, 75), (-15,
                                                                          77), (-17, 91), (-25, 107), (-25, 111), (-28, 122),
                    (-11, 76), (-10, 44), (-10, 52), (-10, 57), (-9,
                                                                 58), (-16, 72), (-7, 69), (-4, 69), (-5, 74), (-9, 86)
                ),
                (
                    (-24, 115), (-22, 82), (-9, 62), (0, 53), (0, 59), (-14,
                                                                        85), (-13, 89), (-13, 94), (-11, 92), (-29, 127),
                    (-21, 100), (-14, 57), (-12, 67), (-11, 71), (-10, 77), (-21,
                                                                             85), (-16, 88), (-23, 104), (-15, 98), (-37, 127),
                    (-10, 82), (-8, 48), (-8, 61), (-8, 66), (-7, 70), (-14,
                                                                        75), (-10, 79), (-9, 83), (-12, 92), (-18, 108),
                    (-24, 115), (-22, 82), (-9, 62), (0, 53), (0, 59), (-14,
                                                                        85), (-13, 89), (-13, 94), (-11, 92), (-29, 127),
                    (-21, 100), (-14, 57), (-12, 67), (-11, 71), (-10, 77), (-21,
                                                                             85), (-16, 88), (-23, 104), (-15, 98), (-37, 127),
                    (-10, 82), (-8, 48), (-8, 61), (-8, 66), (-7, 70), (-14,
                                                                        75), (-10, 79), (-9, 83), (-12, 92), (-18, 108)
                )
            )

            if slice_type in (SliceType.I, SliceType.SI):
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 952
        elif ctxIdx >= 1012 and ctxIdx <= 1023:
            ctxMNIDC = (
                (
                    (-3, 70), (-8, 93), (-10, 90), (-30, 127), (-3, 70), (-8,
                                                                          93), (-10, 90), (-30, 127), (-3, 70), (-8, 93),
                    (-10, 90), (-30, 127)
                ),
                (
                    (-3, 74), (-9, 92), (-8, 87), (-23, 126), (-3, 74), (-9,
                                                                         92), (-8, 87), (-23, 126), (-3, 74), (-9, 92),
                    (-8, 87), (-23, 126)
                ),
                (
                    (-2, 73), (-12, 104), (-9, 91), (-31, 127), (-2, 73), (-12,
                                                                           104), (-9, 91), (-31, 127), (-2, 73), (-12, 104),
                    (-9, 91), (-31, 127)
                ),
                (
                    (-5, 79), (-11, 104), (-11, 91), (-30, 127), (-5, 79), (-11,
                                                                            104), (-11, 91), (-30, 127), (-5, 79), (-11, 104),
                    (-11, 91), (-30, 127)
                )
            )

            if slice_type in (SliceType.I, SliceType.SI):
                ctxMN = ctxMNIDC[0]
            else:
                ctxMN = ctxMNIDC[cabac_init_idc + 1]
            ctxIdx -= 1012
        else:
            raise "cabac_getmn 错误的 ctxIdx:" + str(ctxIdx)
        return ctxMN[ctxIdx]

    def cabac_init_context_variables(self, slice_type, cabac_init_idc, SliceQPY):
        '''
        **9.3.1.1 初始化变量**
        - pStateIdx 状态ID
        - valMPS 最大值可能性
        '''
        self.stateIdx = {}
        self.MPSValue = {}
        for ctxIdx in range(1024):
            m, n = self.cabac_getmn(ctxIdx, cabac_init_idc, slice_type)
            preCtxState = Clip3(1, 126, ((m * Clip3(0, 51, SliceQPY)) >> 4) + n)
            if preCtxState <= 63:
                self.stateIdx[ctxIdx] = 63 - preCtxState
                self.MPSValue[ctxIdx] = 0
            else:
                self.stateIdx[ctxIdx] = preCtxState - 64
                self.MPSValue[ctxIdx] = 1

    def cabac_inti_arithmetic_decoding_engine(self):
        self.codIRange = 0x01FE
        self.codIOffset = self.read_bits(9)

    def cabac_RenormD(self):
        while self.codIRange < 0x0100:
            self.codIRange = self.codIRange << 1
            self.codIOffset = self.codIOffset << 1
            self.codIOffset = self.codIOffset | self.read_bits(1)

    def cabac_DecodeDecision(self, ctxIdx) -> int:
        '''
            实现 '9.3.3.2.1 DecodeDecision() 
            输入是 ctxIdx codIRange 和 codIOffset
        '''
        rangeTabLPS = (
            (128, 176, 208, 240),
            (128, 167, 197, 227),
            (128, 158, 187, 216),
            (123, 150, 178, 205),
            (116, 142, 169, 195),
            (111, 135, 160, 185),
            (105, 128, 152, 175),
            (100, 122, 144, 166),
            (95, 116, 137, 158),
            (90, 110, 130, 150),
            (85, 104, 123, 142),
            (81, 99, 117, 135),
            (77, 94, 111, 128),
            (73, 89, 105, 122),
            (69, 85, 100, 116),
            (66, 80, 95, 110),
            (62, 76, 90, 104),
            (59, 72, 86, 99),
            (56, 69, 81, 94),
            (53, 65, 77, 89),
            (51, 62, 73, 85),
            (48, 59, 69, 80),
            (46, 56, 66, 76),
            (43, 53, 63, 72),
            (41, 50, 59, 69),
            (39, 48, 56, 65),
            (37, 45, 54, 62),
            (35, 43, 51, 59),
            (33, 41, 48, 56),
            (32, 39, 46, 53),
            (30, 37, 43, 50),
            (29, 35, 41, 48),
            (27, 33, 39, 45),
            (26, 31, 37, 43),
            (24, 30, 35, 41),
            (23, 28, 33, 39),
            (22, 27, 32, 37),
            (21, 26, 30, 35),
            (20, 24, 29, 33),
            (19, 23, 27, 31),
            (18, 22, 26, 30),
            (17, 21, 25, 28),
            (16, 20, 23, 27),
            (15, 19, 22, 25),
            (14, 18, 21, 24),
            (14, 17, 20, 23),
            (13, 16, 19, 22),
            (12, 15, 18, 21),
            (12, 14, 17, 20),
            (11, 14, 16, 19),
            (11, 13, 15, 18),
            (10, 12, 15, 17),
            (10, 12, 14, 16),
            (9, 11, 13, 15),
            (9, 11, 12, 14),
            (8, 10, 12, 14),
            (8, 9, 11, 13),
            (7, 9, 11, 12),
            (7, 9, 10, 12),
            (7, 8, 10, 11),
            (6, 8, 9, 11),
            (6, 7, 9, 10),
            (6, 7, 8, 9),
            (2, 2, 2, 2),
        )

        transIdxLPS = (
            0, 0, 1, 2, 2, 4, 4, 5, 6, 7, 8, 9, 9, 11, 11, 12,
            13, 13, 15, 15, 16, 16, 18, 18, 19, 19, 21, 21, 22, 22, 23, 24,
            24, 25, 26, 26, 27, 27, 28, 29, 29, 30, 30, 30, 31, 32, 32, 33,
            33, 33, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 63
        )

        transIdxMPS = (
            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
            17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
            49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 62, 63
        )
        # print(self.stateIdx)
        # print("cabac_DecodeDecision ctxIdx", ctxIdx, )
        pStateIdx = self.stateIdx[ctxIdx]
        qCodIRangeIdx = (self.codIRange >> 6) & 3
        codIRangeLPS = rangeTabLPS[pStateIdx][qCodIRangeIdx]
        self.codIRange = self.codIRange - codIRangeLPS
        binVal = 0
        valMPS = self.MPSValue[ctxIdx]
        if self.codIOffset >= self.codIRange:
            binVal = 1 - valMPS
            self.codIOffset = self.codIOffset - self.codIRange
            self.codIRange = codIRangeLPS
            self.stateIdx[ctxIdx] = transIdxLPS[pStateIdx]
        else:
            binVal = valMPS
            self.stateIdx[ctxIdx] = transIdxMPS[pStateIdx]

        self.cabac_RenormD()

        return binVal

    def cabac_decode(self, bypassFlag, ctxIdx):
        '''9.3.3.2'''
        if bypassFlag == 1:
            raise '9.3.3.2.3 DecodeBypass()'
        if ctxIdx == 276:
            raise '9.3.3.2.4 DecodeTerminate()'
        # '
        return self.cabac_DecodeDecision(ctxIdx)

    def mb_type(self, slice:SliceData) -> MbType:
        # Table 9-34 – Syntax elements and associated types of binarization, maxBinIdxCtx, and ctxIdxOffset
        match slice.header.slice_type:
            case SliceType.I:
                if self.pps.entropy_coding_mode_flag != 1:
                    synElVal = self.read_ue()
                    return MbType.I(synElVal)
                ctxIdxOffset = 3
                # '9.3.3.1.1.3'
                mbAddrA = slice.mbAddrN('A')
                condTermFlagA = 1
                if (not mbAddrA) or \
                    (ctxIdxOffset == 0 and mbAddrA.mb_type.name == "SI") or \
                    (ctxIdxOffset == 3 and mbAddrA.mb_type.name == "I_NxN") or \
                        (ctxIdxOffset == 27 and mbAddrA.mb_type.name in ("B_Skip", "B_Direct_16x16")):
                    condTermFlagA = 0

                mbAddrB = slice.mbAddrN('B')
                condTermFlagB = 1
                if (not mbAddrB) or \
                    (ctxIdxOffset == 0 and mbAddrB.mb_type.name == "SI") or \
                    (ctxIdxOffset == 3 and mbAddrB.mb_type.name == "I_NxN") or \
                        (ctxIdxOffset == 27 and mbAddrB.mb_type.name in ("B_Skip", "B_Direct_16x16")):
                    condTermFlagB = 0
                ctxIdxInc = condTermFlagA + condTermFlagB

                ctxIdx = ctxIdxInc + ctxIdxOffset
                #9.3.2.5 Table 9-36 – Binarization for macroblock types in I slices
                # 二值化过程
                binVal = self.cabac_decode(False, ctxIdx)
                if binVal == 0:  # 0
                    synElVal = 0  # I_NxN
                else:  # 1
                    ctxIdx = 276
                    binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 1
                    if binVal == 0:  # 10
                        ctxIdx = ctxIdxOffset + (3 if ctxIdxOffset == 3 else 1)
                        binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 2
                        if binVal == 0:  # 100
                            ctxIdx = ctxIdxOffset + (4 if ctxIdxOffset == 3 else 2)
                            binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 3
                            if binVal == 0:  # 1000
                                ctxIdx = ctxIdxOffset + (6 if ctxIdxOffset == 3 else 3)
                                binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 4
                                if binVal == 0:  # 10000
                                    ctxIdx = ctxIdxOffset + (7 if ctxIdxOffset == 3 else 3)
                                    binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 5
                                    if binVal == 0:  # 100000
                                        synElVal = 1  # I_16x16_0_0_0
                                    else:
                                        synElVal = 2  # I_16x16_1_0_0
                                else:  # 10001
                                    ctxIdx = ctxIdxOffset + (7 if ctxIdxOffset == 3 else 3)
                                    binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 5
                                    if binVal == 0:  # 100010
                                        synElVal = 3  # I_16x16_2_0_0
                                    else:
                                        synElVal = 4  # I_16x16_3_0_0
                            else:  # 1001
                                ctxIdx = ctxIdxOffset + (5 if ctxIdxOffset == 3 else 2)
                                binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 4
                                if binVal == 0:  # 10010
                                    ctxIdx = ctxIdxOffset + (6 if ctxIdxOffset == 3 else 3)
                                    binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 5
                                    if binVal == 0:  # 100100
                                        ctxIdx = ctxIdxOffset + (7 if ctxIdxOffset == 3 else 3)
                                        binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 6
                                        if binVal == 0:  # 1001000
                                            synElVal = 5  # I_16x16_0_1_0
                                        else:
                                            synElVal = 6  # I_16x16_1_1_0
                                    else:  # 100101
                                        ctxIdx = ctxIdxOffset + (7 if ctxIdxOffset == 3 else 3)
                                        binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 6
                                        if binVal == 0:  # 1001010
                                            synElVal = 7  # I_16x16_2_1_0
                                        else:
                                            synElVal = 8  # I_16x16_3_1_0
                                else:  # 10011
                                    ctxIdx = ctxIdxOffset + (6 if ctxIdxOffset == 3 else 3)
                                    binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 5
                                    if binVal == 0:  # 100110
                                        ctxIdx = ctxIdxOffset + (7 if ctxIdxOffset == 3 else 3)
                                        binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 6
                                        if binVal == 0:  # 1001100
                                            synElVal = 9  # I_16x16_0_2_0
                                        else:
                                            synElVal = 10  # I_16x16_1_2_0
                                    else:  # 100111
                                        ctxIdx = ctxIdxOffset + (7 if ctxIdxOffset == 3 else 3)
                                        binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 6
                                        if binVal == 0:  # 1001110
                                            synElVal = 11  # I_16x16_2_2_0
                                        else:
                                            synElVal = 12  # I_16x16_3_2_0
                    else:  # 101
                        ctxIdx = ctxIdxOffset + (4 if ctxIdxOffset == 3 else 2)
                        binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 3
                        if binVal == 0:  # 1010
                            ctxIdx = ctxIdxOffset + (6 if ctxIdxOffset == 3 else 3)
                            binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 4
                            if binVal == 0:  # 10100
                                ctxIdx = ctxIdxOffset + (7 if ctxIdxOffset == 3 else 3)
                                binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 5
                                if binVal == 0:  # 101000
                                    synElVal = 13  # I_16x16_0_0_1
                                else:
                                    synElVal = 14  # I_16x16_1_0_1
                            else:  # 10101
                                ctxIdx = ctxIdxOffset + (7 if ctxIdxOffset == 3 else 3)
                                binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 5
                                if binVal == 0:  # 101010
                                    synElVal = 15  # I_16x16_2_0_1
                                else:
                                    synElVal = 16  # I_16x16_3_0_1
                        else:  # 1011
                            ctxIdx = ctxIdxOffset + (5 if ctxIdxOffset == 3 else 2)
                            binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 4
                            if binVal == 0:  # 10110
                                ctxIdx = ctxIdxOffset + (6 if ctxIdxOffset == 3 else 3)
                                binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 5
                                if binVal == 0:  # 101100
                                    ctxIdx = ctxIdxOffset + (7 if ctxIdxOffset == 3 else 3)
                                    binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 6
                                    if binVal == 0:  # 1011000
                                        synElVal = 17  # I_16x16_0_1_1
                                    else:
                                        synElVal = 18  # I_16x16_1_1_1
                                else:  # 101101
                                    ctxIdx = ctxIdxOffset + (7 if ctxIdxOffset == 3 else 3)
                                    binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 6
                                    if binVal == 0:  # 1011010
                                        synElVal = 19  # I_16x16_2_1_1
                                    else:
                                        synElVal = 20  # I_16x16_3_1_1
                            else:  # 10111
                                ctxIdx = ctxIdxOffset + (6 if ctxIdxOffset == 3 else 3)
                                binVal = self.cabac_decode(False, ctxIdx)  # binIdx = 5
                return MbType.I(synElVal)
            case _:
                raise 'get_mb_type error'

    def transform_size_8x8_flag(self):
        match slice.header.slice_type:
            case SliceType.I:
                if self.pps.entropy_coding_mode_flag != 1:
                    return self.read_bits(1)
                # 数据来源 Table 9-34 – Syntax elements and associated types of binarization, maxBinIdxCtx, and ctxIdxOffset
                ctxIdxOffset = 399
                # ctxIdxInc 推导过程 '9.3.3.1.1.3'
                mbAddrA = slice.mbAddrN('A')
                condTermFlagA = 1
                if not mbAddrA or \
                        mbAddrA.transform_size_8x8_flag == 0:
                    condTermFlagA = 0
                mbAddrB = slice.mbAddrN('B')
                condTermFlagB = 1
                if not mbAddrB or \
                        mbAddrB.transform_size_8x8_flag == 0:
                    condTermFlagB = 0
                ctxIdxInc = condTermFlagA + condTermFlagB

                ctxIdx = ctxIdxInc + ctxIdxOffset
                return self.cabac_decode(False, ctxIdx)
            case _:
                raise 'transform_size_8x8_flag'


        ctxIdxOffset = 399
        # 6.4.8.1
        # 9.3.3.1.1.10 ctxIdxInc 推导过程
        mbAddrA = self.slice.macroblock.get(self.slice.CurrMbAddr-1)
        condTermFlagA = 1
        if not mbAddrA or \
                mbAddrA.transform_size_8x8_flag == 0:
            condTermFlagA = 0
        mbAddrB = self.slice.macroblock.get(self.slice.CurrMbAddr-1)
        condTermFlagB = 1
        if not mbAddrB or \
                mbAddrB.transform_size_8x8_flag == 0:
            condTermFlagB = 0
        ctxIdxInc = condTermFlagA + condTermFlagB
        ctxIdx = ctxIdxOffset + ctxIdxInc
        binVal = bs.cabac_decode(False, ctxIdx)
        return binVal
    
    def mb_qp_delta(self,slice:SliceData) -> int:
        if self.pps.entropy_coding_mode_flag != 1:
            return self.read_se()
        # 
        ctxIdxOffset = 60
        ctxIdxInc = 1
        # 9.3.3.1.1.5
        prevMbAddr = slice.prevMbAddr()
        if  prevMbAddr == None or \
            prevMbAddr.mb_type.name in ("P_Skip", "B_Skip", "I_PCM") or ( \
                prevMbAddr.mb_type.MbPartPredMode != "Intra_16x16" and \
                prevMbAddr.CodedBlockPatternChroma == 0 and \
                prevMbAddr.CodedBlockPatternLuma == 0 ) or \
            prevMbAddr.mb_qp_delta == 0:
            ctxIdxInc = 0
        ctxIdx = ctxIdxOffset + ctxIdxInc
        binVal = self.cabac_decode(False, ctxIdx)
        # 二值化部分
        synElVal = 0
        if binVal == 0:
            synElVal = 0
        else:
            ctxIdx = ctxIdxOffset + 2
            binVal = self.cabac_decode(False, ctxIdx)
            binIdx = 1
            while binVal == 1:
                ctxIdx = ctxIdxOffset + 3
                binVal = self.cabac_decode(False, ctxIdx)
                binIdx += 1
            if binIdx & 0x01:  # 奇数
                binIdx = (binIdx + 1) >> 1  # (−1)^(k+1) * Ceil(k÷2)
            else:  # 偶数
                binIdx = -(binIdx >> 1)  # (−1)^(k+1) * Ceil(k÷2)
            synElVal = binIdx
        return synElVal
    
    def intra_chroma_pred_mode(self,slice:SliceData) -> int:
        if self.pps.entropy_coding_mode_flag != 1:
            return self.read_ue()
        ctxIdxOffset = 64
        # 9.3.3.1.1.8
        mbAddrA = slice.mbAddrN('A')
        condTermFlagA = 1
        if not mbAddrA or \
                mbAddrA.mb_type.name.I_PCM == 0 or \
                mbAddrA.intra_chroma_pred_mode == 0:
            condTermFlagA = 0
        mbAddrB = slice.mbAddrN('B')
        condTermFlagB = 1
        if not mbAddrB or \
                mbAddrB.mb_type.name.I_PCM == 0 or \
                mbAddrB.intra_chroma_pred_mode == 0:
            condTermFlagB = 0
        ctxIdxInc = condTermFlagA + condTermFlagB
        ctxIdx = ctxIdxOffset + ctxIdxInc
        # 二值化部分
        binVal = self.cabac_decode(False, ctxIdx)
        if binVal == 0:
            synElVal = 0
        else:
            ctxIdx = ctxIdxOffset + 3  # Table 9-39
            binVal = self.cabac_decode(False, ctxIdx)
        if binVal == 0:  # //10
            synElVal = 1
        else:  # 11
            ctxIdx = ctxIdxOffset + 3  # Table 9-39
            binVal = self.cabac_decode(False, ctxIdx)
        if binVal == 0:  # 110
            synElVal = 2
        else:  # 111
            synElVal = 3  # TU, cMax=3
        return synElVal

    def coded_block_pattern(self,slice:SliceData, mb: MacroBlock) -> int:
        if self.pps.entropy_coding_mode_flag != 1:
            mev = self.read_me()
            if mb.mb_type.MbPartPredMode in ('Intra_4x4', 'Intra_8x8'):
                return mev[1]
            else:
                return mev[2]
        
        def coded_block_pattern_inc (ctxIdxOffset, binIdx):
            luma8x8BlkIdx = binIdx
            if ctxIdxOffset == 73:
                condTermFlagA = 1
                mbAddrA = slice.mbAddrN('A')
                if mbAddrA is None or mbAddrA.mb_type.name == 'I_PCM' or (
                    mbAddrA.mb_type.name not in ('P_Skip', 'B_Skip') and 
                    ((mbAddrA.CodedBlockPatternLuma >> luma8x8BlkIdx) & 1) != 0
                ):
                    condTermFlagA = 0
                condTermFlagB = 1
                mbAddrB = slice.mbAddrN('B')
                if mbAddrB is None or mbAddrB.mb_type.name == 'I_PCM' or (
                    mbAddrB.mb_type.name not in ('P_Skip', 'B_Skip') and 
                    ((mbAddrB.CodedBlockPatternLuma >> luma8x8BlkIdx) & 1) != 0
                ):
                    condTermFlagB = 0
                ctxIdxInc = condTermFlagA + 2 * condTermFlagB 
                return ctxIdxInc
            elif ctxIdxOffset == 77:
                mbAddrA = slice.mbAddrN('A')
                condTermFlagA = 1
                if mbAddrA is None or mbAddrA.mb_type.name == 'I_PCM' or (
                    mbAddrA.mb_type.name in ('P_Skip', 'B_Skip') or 
                    (binIdx == 0 and mbAddrA.CodedBlockPatternChroma == 0) or 
                    (binIdx == 1 and mbAddrA.CodedBlockPatternChroma != 2)
                ):
                    condTermFlagA = 0
                mbAddrB = slice.mbAddrN('B')
                condTermFlagB = 1
                if mbAddrB is None or mbAddrB.mb_type.name == 'I_PCM' or (
                    mbAddrB.mb_type.name in ('P_Skip', 'B_Skip') or 
                    (binIdx == 0 and mbAddrB.CodedBlockPatternChroma == 0) or 
                    (binIdx == 1 and mbAddrB.CodedBlockPatternChroma != 2)
                ):
                    condTermFlagB = 0
                ctxIdxInc = condTermFlagA + 2 * condTermFlagB + (4 if binIdx == 1 else 0)
                return ctxIdxInc
        
        ctxIdxOffset = 73
        # 第一个 bin
        binIdx = 0
        ctxIdxInc = coded_block_pattern_inc(ctxIdxOffset, binIdx)
        ctxIdx = ctxIdxOffset + ctxIdxInc
        binVal = self.cabac_decode(False, ctxIdx)
        CodedBlockPatternLuma = binVal
        binIdx = 1
        ctxIdxInc = coded_block_pattern_inc(ctxIdxOffset, binIdx)
        ctxIdx = ctxIdxOffset + ctxIdxInc
        binVal = self.cabac_decode(False, ctxIdx)
        CodedBlockPatternLuma += binVal << 1
        binIdx = 2
        ctxIdxInc = coded_block_pattern_inc(ctxIdxOffset, binIdx)
        ctxIdx = ctxIdxOffset + ctxIdxInc
        binVal = self.cabac_decode(False, ctxIdx)
        CodedBlockPatternLuma += binVal << 2
        binIdx = 3
        ctxIdxInc = coded_block_pattern_inc(ctxIdxOffset, binIdx)
        ctxIdx = ctxIdxOffset + ctxIdxInc
        binVal = self.cabac_decode(False, ctxIdx)
        CodedBlockPatternLuma += binVal << 3
        CodedBlockPatternChroma = 0
        if self.sps.chroma_format_idc not in (1, 3):
            ctxIdxOffset = 77
            binIdx = 0
            ctxIdxInc = coded_block_pattern_inc(ctxIdxOffset, binIdx)
            ctxIdx = ctxIdxOffset + ctxIdxInc
            binVal = self.cabac_decode(False, ctxIdx)
            if binVal == 0:
                CodedBlockPatternChroma = 0
            else:
                CodedBlockPatternChroma = 1
                binIdx = 1
                ctxIdxInc = coded_block_pattern_inc(
                    ctxIdxOffset, binIdx)
                ctxIdx = ctxIdxOffset + ctxIdxInc
                binVal = self.cabac_decode(False, ctxIdx)
                if binVal == 1:
                    CodedBlockPatternChroma = 2
        return CodedBlockPatternLuma + CodedBlockPatternChroma * 16

    #----------- CAVLC ----------------


    def get_coeff(self, residualLevel:str, mb:MacroBlock, slice:SliceData) -> tuple[int,int,int]:
        nC = 0
        if residualLevel == "ChromaDCLevel":
            if self.sps.ChromaArrayType == 1:
                nC = -1
            elif self.sps.ChromaArrayType == 2:
                nC = -2
            else:
                nC = 0
        else:
            luma4x4BlkIdx = mb.luma4x4BlkIdx
            if residualLevel == "Intra16x16DCLevel":
                luma4x4BlkIdx = 0
            if residualLevel == "CbIntra16x16DCLevel":
                cb4x4BlkIdx = 0
            if residualLevel == "CrIntra16x16DCLevel":
                cr4x4BlkIdx = 0


            mbAddrA = slice.mbAddrN('A')
            mbAddrB = slice.mbAddrN('B')


            if residualLevel in ("Intra16x16DCLevel", "Intra16x16ACLevel", "LumaLevel4x4"):

                x = InverseRasterScan( luma4x4BlkIdx // 4, 8, 8, 16, 0 ) + InverseRasterScan( luma4x4BlkIdx % 4, 4, 4, 8, 0 )
                y = InverseRasterScan( luma4x4BlkIdx // 4, 8, 8, 16, 1 ) + InverseRasterScan( luma4x4BlkIdx % 4, 4, 4, 8, 1 )
                print("luma4x4BlkIdx->", luma4x4BlkIdx, "    x->",x,"    y->", y)
   
            elif residualLevel in ("CbIntra16x16DCLevel", "CbIntra16x16ACLevel", "CbLevel4x4"):
                raise('未开发')
            elif residualLevel in ("CrIntra16x16DCLevel", "CrIntra16x16ACLevel", "CrLevel4x4"):
                raise('未开发')
            elif residualLevel in ("ChromaACLevel"):
                raise('未开发')
            
            availableFlagA = False
            availableFlagB = False
            if not mbAddrA or \
                (mb.mb_type.MbPartPredMode in ("Intra_4x4", "Intra_8x8", "Intra_16x16") and self.pps.constrained_intra_pred_flag) and \
                mbAddrA.mb_type.MbPartPredMode in ("Pred_L0", "Pred_L1", "BiPred"):
                availableFlagA = False
            else:
                availableFlagA = True
            
            if not mbAddrB or \
                (mb.mb_type.MbPartPredMode in ("Intra_4x4", "Intra_8x8", "Intra_16x16") and self.pps.constrained_intra_pred_flag) and \
                mbAddrB.mb_type.MbPartPredMode in ("Pred_L0", "Pred_L1", "BiPred"):
                availableFlagB = False
            else:
                availableFlagB = True
            
            if availableFlagA:
                if mbAddrA.mb_type.name in ("P_Skip", "B_Skip"):
                    nA = 0
                elif mbAddrA.mb_type.name == "I_PCM":
                    nA = 16
                else:
                    raise('未开发')

            if availableFlagB:
                if mbAddrB.mb_type.name in ("P_Skip", "B_Skip"):
                    nB = 0
                elif mbAddrB.mb_type.name == "I_PCM":
                    nB = 16
                else:
                    raise('未开发')
                
            if availableFlagA and availableFlagB:
                nC = (nA + nB + 1) >> 1
            elif availableFlagA and not availableFlagB:
                nC = nA
            elif availableFlagB and not availableFlagA:
                nC = nB
            else:
                nC = 0

        coeff_token = self.read_bits(16)
        if (0 <= nC and nC < 2):
            if (coeff_token >> 15) == 1: #(1)b
                coeff_token_length = 1
                TrailingOnes = 0
                TotalCoeff = 0
            elif (coeff_token >> 10) == 5: #(0001 01)b ==> (00 0101)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 1
            elif (coeff_token >> 14) == 1: #(01)b
                coeff_token_length = 2
                TrailingOnes = 1
                TotalCoeff = 1
            elif (coeff_token >> 8) == 7: #(0000 0111)b
                coeff_token_length = 8
                TrailingOnes = 0
                TotalCoeff = 2
            elif (coeff_token >> 10) == 4: #(0001 00)b ==> (00 0100)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 2
            elif (coeff_token >> 13) == 1: #(001)b
                coeff_token_length = 3
                TrailingOnes = 2
                TotalCoeff = 2
            elif (coeff_token >> 7) == 7: #(0000 0011 1)b ==> (0 0000 0111)b
                coeff_token_length = 9
                TrailingOnes = 0
                TotalCoeff = 3
            elif (coeff_token >> 8) == 6: #(0000 0110)b
                coeff_token_length = 8
                TrailingOnes = 1
                TotalCoeff = 3
            elif (coeff_token >> 9) == 5: #(0000 101)b ==> (000 0101)b
                coeff_token_length = 7
                TrailingOnes = 2
                TotalCoeff = 3
            elif (coeff_token >> 11) == 3: #(0001 1)b ==> (0 0011)b
                coeff_token_length = 5
                TrailingOnes = 3
                TotalCoeff = 3
            elif (coeff_token >> 6) == 7: #(0000 0001 11)b ==> (00 0000 0111)b
                coeff_token_length = 10
                TrailingOnes = 0
                TotalCoeff = 4
            elif (coeff_token >> 7) == 6: #(0000 0011 0)b ==> (0 0000 0110)b
                coeff_token_length = 9
                TrailingOnes = 1
                TotalCoeff = 4
            elif (coeff_token >> 8) == 5: #(0000 0101)b ==> (0000 0101)b
                coeff_token_length = 8
                TrailingOnes = 2
                TotalCoeff = 4
            elif (coeff_token >> 10) == 3: #(0000 11)b ==> (00 0011)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 4
            elif (coeff_token >> 5) == 7: #(0000 0000 111)b ==> (000 0000 0111)b
                coeff_token_length = 11
                TrailingOnes = 0
                TotalCoeff = 5
            elif (coeff_token >> 6) == 6: #(0000 0001 10)b ==> (00 0000 0110)b
                coeff_token_length = 10
                TrailingOnes = 1
                TotalCoeff = 5
            elif (coeff_token >> 7) == 5: #(0000 0010 1)b ==> (0 0000 0101)b
                coeff_token_length = 9
                TrailingOnes = 2
                TotalCoeff = 5
            elif (coeff_token >> 9) == 4: #(0000 100)b ==> (000 0100)b
                coeff_token_length = 7
                TrailingOnes = 3
                TotalCoeff = 5
            elif (coeff_token >> 3) == 15: #(0000 0000 0111 1)b ==> (0 0000 0000 1111)b
                coeff_token_length = 13
                TrailingOnes = 0
                TotalCoeff = 6
            elif (coeff_token >> 5) == 6: #(0000 0000 110)b ==> (000 0000 0110)b
                coeff_token_length = 11
                TrailingOnes = 1
                TotalCoeff = 6
            elif (coeff_token >> 6) == 5: #(0000 0001 01)b ==> (00 0000 0101)b
                coeff_token_length = 10
                TrailingOnes = 2
                TotalCoeff = 6
            elif (coeff_token >> 8) == 4: #(0000 0100)b ==> (0000 0100)b
                coeff_token_length = 8
                TrailingOnes = 3
                TotalCoeff = 6
            elif (coeff_token >> 3) == 11: #(0000 0000 0101 1)b ==> (0 0000 0000 1011)b
                coeff_token_length = 13
                TrailingOnes = 0
                TotalCoeff = 7
            elif (coeff_token >> 3) == 14: #(0000 0000 0111 0)b ==> (0 0000 0000 1110)b
                coeff_token_length = 13
                TrailingOnes = 1
                TotalCoeff = 7
            elif (coeff_token >> 5) == 5: #(0000 0000 101)b ==> (000 0000 0101)b
                coeff_token_length = 11
                TrailingOnes = 2
                TotalCoeff = 7
            elif (coeff_token >> 7) == 4: #(0000 0010 0)b ==> (0 0000 0100)b
                coeff_token_length = 9
                TrailingOnes = 3
                TotalCoeff = 7
            elif (coeff_token >> 3) == 8: #(0000 0000 0100 0)b ==> (0 0000 0000 1000)b
                coeff_token_length = 13
                TrailingOnes = 0
                TotalCoeff = 8
            elif (coeff_token >> 3) == 10: #(0000 0000 0101 0)b ==> (0 0000 0000 1010)b
                coeff_token_length = 13
                TrailingOnes = 1
                TotalCoeff = 8
            elif (coeff_token >> 3) == 13: #(0000 0000 0110 1)b ==> (0 0000 0000 1101)b
                coeff_token_length = 13
                TrailingOnes = 2
                TotalCoeff = 8
            elif (coeff_token >> 6) == 4: #(0000 0001 00)b ==> (00 0000 0100)b
                coeff_token_length = 10
                TrailingOnes = 3
                TotalCoeff = 8
            elif (coeff_token >> 2) == 15: #(0000 0000 0011 11)b ==> (00 0000 0000 1111)b
                coeff_token_length = 14
                TrailingOnes = 0
                TotalCoeff = 9
            elif (coeff_token >> 2) == 14: #(0000 0000 0011 10)b ==> (00 0000 0000 1110)b
                coeff_token_length = 14
                TrailingOnes = 1
                TotalCoeff = 9
            elif (coeff_token >> 3) == 9: #(0000 0000 0100 1)b ==> (0 0000 0000 1001)b
                coeff_token_length = 13
                TrailingOnes = 2
                TotalCoeff = 9
            elif (coeff_token >> 5) == 4: #(0000 0000 100)b ==> (000 0000 0100)b
                coeff_token_length = 11
                TrailingOnes = 3
                TotalCoeff = 9
            elif (coeff_token >> 2) == 11: #(0000 0000 0010 11)b ==> (00 0000 0000 1011)b
                coeff_token_length = 14
                TrailingOnes = 0
                TotalCoeff = 10
            elif (coeff_token >> 2) == 10: #(0000 0000 0010 10)b ==> (00 0000 0000 1010)b
                coeff_token_length = 14
                TrailingOnes = 1
                TotalCoeff = 10
            elif (coeff_token >> 2) == 13: #(0000 0000 0011 01)b ==> (00 0000 0000 1101)b
                coeff_token_length = 14
                TrailingOnes = 2
                TotalCoeff = 10
            elif (coeff_token >> 3) == 12: #(0000 0000 0110 0)b ==> (0 0000 0000 1100)b
                coeff_token_length = 13
                TrailingOnes = 3
                TotalCoeff = 10
            elif (coeff_token >> 1) == 15: #(0000 0000 0001 111)b ==> (000 0000 0000 1111)b
                coeff_token_length = 15
                TrailingOnes = 0
                TotalCoeff = 11
            elif (coeff_token >> 1) == 14: #(0000 0000 0001 110)b ==> (000 0000 0000 1110)b
                coeff_token_length = 15
                TrailingOnes = 1
                TotalCoeff = 11
            elif (coeff_token >> 2) == 9: #(0000 0000 0010 01)b ==> (00 0000 0000 1001)b
                coeff_token_length = 14
                TrailingOnes = 2
                TotalCoeff = 11
            elif (coeff_token >> 2) == 12: #(0000 0000 0011 00)b ==> (00 0000 0000 1100)b
                coeff_token_length = 14
                TrailingOnes = 3
                TotalCoeff = 11
            elif (coeff_token >> 1) == 11: #(0000 0000 0001 011)b ==> (000 0000 0000 1011)b
                coeff_token_length = 15
                TrailingOnes = 0
                TotalCoeff = 12
            elif (coeff_token >> 1) == 10: #(0000 0000 0001 010)b ==> (000 0000 0000 1010)b
                coeff_token_length = 15
                TrailingOnes = 1
                TotalCoeff = 12
            elif (coeff_token >> 1) == 13: #(0000 0000 0001 101)b ==> (000 0000 0000 1101)b
                coeff_token_length = 15
                TrailingOnes = 2
                TotalCoeff = 12
            elif (coeff_token >> 2) == 8: #(0000 0000 0010 00)b ==> (00 0000 0000 1000)b
                coeff_token_length = 14
                TrailingOnes = 3
                TotalCoeff = 12
            elif (coeff_token >> 0) == 15: #(0000 0000 0000 1111)b ==> (0000 0000 0000 1111)b
                coeff_token_length = 16
                TrailingOnes = 0
                TotalCoeff = 13
            elif (coeff_token >> 1) == 1: #(0000 0000 0000 001)b ==> (000 0000 0000 0001)b
                coeff_token_length = 15
                TrailingOnes = 1
                TotalCoeff = 13
            elif (coeff_token >> 1) == 9: #(0000 0000 0001 001)b ==> (000 0000 0000 1001)b
                coeff_token_length = 15
                TrailingOnes = 2
                TotalCoeff = 13
            elif (coeff_token >> 1) == 12: #(0000 0000 0001 100)b ==> (000 0000 0000 1100)b
                coeff_token_length = 15
                TrailingOnes = 3
                TotalCoeff = 13
            elif (coeff_token >> 0) == 11: #(0000 0000 0000 1011)b ==> (0000 0000 0000 1011)b
                coeff_token_length = 16
                TrailingOnes = 0
                TotalCoeff = 14
            elif (coeff_token >> 0) == 14: #(0000 0000 0000 1110)b ==> (0000 0000 0000 1110)b
                coeff_token_length = 16
                TrailingOnes = 1
                TotalCoeff = 14
            elif (coeff_token >> 0) == 13: #(0000 0000 0000 1101)b ==> (0000 0000 0000 1101)b
                coeff_token_length = 16
                TrailingOnes = 2
                TotalCoeff = 14
            elif (coeff_token >> 1) == 8: #(0000 0000 0001 000)b ==> (000 0000 0000 1000)b
                coeff_token_length = 15
                TrailingOnes = 3
                TotalCoeff = 14
            elif (coeff_token >> 0) == 7: #(0000 0000 0000 0111)b ==> (0000 0000 0000 0111)b
                coeff_token_length = 16
                TrailingOnes = 0
                TotalCoeff = 15
            elif (coeff_token >> 0) == 10: #(0000 0000 0000 1010)b ==> (0000 0000 0000 1010)b
                coeff_token_length = 16
                TrailingOnes = 1
                TotalCoeff = 15
            elif (coeff_token >> 0) == 9: #(0000 0000 0000 1001)b ==> (0000 0000 0000 1001)b
                coeff_token_length = 16
                TrailingOnes = 2
                TotalCoeff = 15
            elif (coeff_token >> 0) == 12: #(0000 0000 0000 1100)b ==> (0000 0000 0000 1100)b
                coeff_token_length = 16
                TrailingOnes = 3
                TotalCoeff = 15
            elif (coeff_token >> 0) == 4: #(0000 0000 0000 0100)b ==> (0000 0000 0000 0100)b
                coeff_token_length = 16
                TrailingOnes = 0
                TotalCoeff = 16
            elif (coeff_token >> 0) == 6: #(0000 0000 0000 0110)b ==> (0000 0000 0000 0110)b
                coeff_token_length = 16
                TrailingOnes = 1
                TotalCoeff = 16
            elif (coeff_token >> 0) == 5: #(0000 0000 0000 0101)b ==> (0000 0000 0000 0101)b
                coeff_token_length = 16
                TrailingOnes = 2
                TotalCoeff = 16
            elif (coeff_token >> 0) == 8: #(0000 0000 0000 1000)b ==> (0000 0000 0000 1000)b
                coeff_token_length = 16
                TrailingOnes = 3
                TotalCoeff = 16
        elif 2 <= nC and nC < 4:
            if (coeff_token >> 14) == 0x0003: # (11)b
                coeff_token_length = 2
                TrailingOnes = 0
                TotalCoeff = 0
            elif (coeff_token >> 10) == 0x000B: # (0010 11)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 1
            elif (coeff_token >> 14) == 0x0002: # (10)b
                coeff_token_length = 2
                TrailingOnes = 1
                TotalCoeff = 1
            elif (coeff_token >> 10) == 0x0007: # (0001 11)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 2
            elif (coeff_token >> 11) == 0x0007: # (0011 1)b
                coeff_token_length = 5
                TrailingOnes = 1
                TotalCoeff = 2
            elif (coeff_token >> 13) == 0x0003: # (011)b
                coeff_token_length = 3
                TrailingOnes = 2
                TotalCoeff = 2
            elif (coeff_token >> 9) == 0x0007: # (0000 111)b
                coeff_token_length = 7
                TrailingOnes = 0
                TotalCoeff = 3
            elif (coeff_token >> 10) == 0x000A: # (0010 10)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 3
            elif (coeff_token >> 10) == 0x0009: # (0010 01)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 3
            elif (coeff_token >> 12) == 0x0005: # (0101)b
                coeff_token_length = 4
                TrailingOnes = 3
                TotalCoeff = 3
            elif (coeff_token >> 8) == 0x0007: # (0000 0111)b
                coeff_token_length = 8
                TrailingOnes = 0
                TotalCoeff = 4
            elif (coeff_token >> 10) == 0x0006: # (0001 10)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 4
            elif (coeff_token >> 10) == 0x0005: # (0001 01)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 4
            elif (coeff_token >> 12) == 0x0004: # (0100)b
                coeff_token_length = 4
                TrailingOnes = 3
                TotalCoeff = 4
            elif (coeff_token >> 8) == 0x0004: # (0000 0100)b
                coeff_token_length = 8
                TrailingOnes = 0
                TotalCoeff = 5
            elif (coeff_token >> 9) == 0x0006: # (0000 110)b
                coeff_token_length = 7
                TrailingOnes = 1
                TotalCoeff = 5
            elif (coeff_token >> 9) == 0x0005: # (0000 101)b
                coeff_token_length = 7
                TrailingOnes = 2
                TotalCoeff = 5
            elif (coeff_token >> 11) == 0x0006: # (0011 0)b
                coeff_token_length = 5
                TrailingOnes = 3
                TotalCoeff = 5
            elif (coeff_token >> 7) == 0x0007: # (0000 0011 1)b
                coeff_token_length = 9
                TrailingOnes = 0
                TotalCoeff = 6
            elif (coeff_token >> 8) == 0x0006: # (0000 0110)b
                coeff_token_length = 8
                TrailingOnes = 1
                TotalCoeff = 6
            elif (coeff_token >> 8) == 0x0005: # (0000 0101)b
                coeff_token_length = 8
                TrailingOnes = 2
                TotalCoeff = 6
            elif (coeff_token >> 10) == 0x0008: # (0010 00)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 6
            elif (coeff_token >> 5) == 0x000F: # (0000 0001 111)b
                coeff_token_length = 11
                TrailingOnes = 0
                TotalCoeff = 7
            elif (coeff_token >> 7) == 0x0006: # (0000 0011 0)b
                coeff_token_length = 9
                TrailingOnes = 1
                TotalCoeff = 7
            elif (coeff_token >> 7) == 0x0005: # (0000 0010 1)b
                coeff_token_length = 9
                TrailingOnes = 2
                TotalCoeff = 7
            elif (coeff_token >> 10) == 0x0004: # (0001 00)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 7
            elif (coeff_token >> 5) == 0x000B: # (0000 0001 011)b
                coeff_token_length = 11
                TrailingOnes = 0
                TotalCoeff = 8
            elif (coeff_token >> 5) == 0x000E: # (0000 0001 110)b
                coeff_token_length = 11
                TrailingOnes = 1
                TotalCoeff = 8
            elif (coeff_token >> 5) == 0x000D: # (0000 0001 101)b
                coeff_token_length = 11
                TrailingOnes = 2
                TotalCoeff = 8
            elif (coeff_token >> 9) == 0x0004: # (0000 100)b
                coeff_token_length = 7
                TrailingOnes = 3
                TotalCoeff = 8
            elif (coeff_token >> 4) == 0x000F: # (0000 0000 1111)b
                coeff_token_length = 12
                TrailingOnes = 0
                TotalCoeff = 9
            elif (coeff_token >> 5) == 0x000A: # (0000 0001 010)b
                coeff_token_length = 11
                TrailingOnes = 1
                TotalCoeff = 9
            elif (coeff_token >> 5) == 0x0009: # (0000 0001 001)b
                coeff_token_length = 11
                TrailingOnes = 2
                TotalCoeff = 9
            elif (coeff_token >> 7) == 0x0004: # (0000 0010 0)b
                coeff_token_length = 9
                TrailingOnes = 3
                TotalCoeff = 9
            elif (coeff_token >> 4) == 0x000B: # (0000 0000 1011)b
                coeff_token_length = 12
                TrailingOnes = 0
                TotalCoeff = 10
            elif (coeff_token >> 4) == 0x000E: # (0000 0000 1110)b
                coeff_token_length = 12
                TrailingOnes = 1
                TotalCoeff = 10
            elif (coeff_token >> 4) == 0x000D: # (0000 0000 1101)b
                coeff_token_length = 12
                TrailingOnes = 2
                TotalCoeff = 10
            elif (coeff_token >> 5) == 0x000C: # (0000 0001 100)b
                coeff_token_length = 11
                TrailingOnes = 3
                TotalCoeff = 10
            elif (coeff_token >> 4) == 0x0008: # (0000 0000 1000)b
                coeff_token_length = 12
                TrailingOnes = 0
                TotalCoeff = 11
            elif (coeff_token >> 4) == 0x000A: # (0000 0000 1010)b
                coeff_token_length = 12
                TrailingOnes = 1
                TotalCoeff = 11
            elif (coeff_token >> 4) == 0x0009: # (0000 0000 1001)b
                coeff_token_length = 12
                TrailingOnes = 2
                TotalCoeff = 11
            elif (coeff_token >> 5) == 0x0008: # (0000 0001 000)b
                coeff_token_length = 11
                TrailingOnes = 3
                TotalCoeff = 11
            elif (coeff_token >> 3) == 0x000F: # (0000 0000 0111 1)b
                coeff_token_length = 13
                TrailingOnes = 0
                TotalCoeff = 12
            elif (coeff_token >> 3) == 0x000E: # (0000 0000 0111 0)b
                coeff_token_length = 13
                TrailingOnes = 1
                TotalCoeff = 12
            elif (coeff_token >> 3) == 0x000D: # (0000 0000 0110 1)b
                coeff_token_length = 13
                TrailingOnes = 2
                TotalCoeff = 12
            elif (coeff_token >> 4) == 0x000C: # (0000 0000 1100)b
                coeff_token_length = 12
                TrailingOnes = 3
                TotalCoeff = 12
            elif (coeff_token >> 3) == 0x000B: # (0000 0000 0101 1)b
                coeff_token_length = 13
                TrailingOnes = 0
                TotalCoeff = 13
            elif (coeff_token >> 3) == 0x000A: # (0000 0000 0101 0)b
                coeff_token_length = 13
                TrailingOnes = 1
                TotalCoeff = 13
            elif (coeff_token >> 3) == 0x0009: # (0000 0000 0100 1)b
                coeff_token_length = 13
                TrailingOnes = 2
                TotalCoeff = 13
            elif (coeff_token >> 3) == 0x000C: # (0000 0000 0110 0)b
                coeff_token_length = 13
                TrailingOnes = 3
                TotalCoeff = 13
            elif (coeff_token >> 3) == 0x0007: # (0000 0000 0011 1)b
                coeff_token_length = 13
                TrailingOnes = 0
                TotalCoeff = 14
            elif (coeff_token >> 2) == 0x000B: # (0000 0000 0010 11)b
                coeff_token_length = 14
                TrailingOnes = 1
                TotalCoeff = 14
            elif (coeff_token >> 3) == 0x0006: # (0000 0000 0011 0)b
                coeff_token_length = 13
                TrailingOnes = 2
                TotalCoeff = 14
            elif (coeff_token >> 3) == 0x0008: # (0000 0000 0100 0)b
                coeff_token_length = 13
                TrailingOnes = 3
                TotalCoeff = 14
            elif (coeff_token >> 2) == 0x0009: # (0000 0000 0010 01)b
                coeff_token_length = 14
                TrailingOnes = 0
                TotalCoeff = 15
            elif (coeff_token >> 2) == 0x0008: # (0000 0000 0010 00)b
                coeff_token_length = 14
                TrailingOnes = 1
                TotalCoeff = 15
            elif (coeff_token >> 2) == 0x000A: # (0000 0000 0010 10)b
                coeff_token_length = 14
                TrailingOnes = 2
                TotalCoeff = 15
            elif (coeff_token >> 3) == 0x0001: # (0000 0000 0000 1)b
                coeff_token_length = 13
                TrailingOnes = 3
                TotalCoeff = 15
            elif (coeff_token >> 2) == 0x0007: # (0000 0000 0001 11)b
                coeff_token_length = 14
                TrailingOnes = 0
                TotalCoeff = 16
            elif (coeff_token >> 2) == 0x0006: # (0000 0000 0001 10)b
                coeff_token_length = 14
                TrailingOnes = 1
                TotalCoeff = 16
            elif (coeff_token >> 2) == 0x0005: # (0000 0000 0001 01)b
                coeff_token_length = 14
                TrailingOnes = 2
                TotalCoeff = 16
            elif (coeff_token >> 2) == 0x0004: # (0000 0000 0001 00)b
                coeff_token_length = 14
                TrailingOnes = 3
                TotalCoeff = 16
        elif 4 <= nC and nC < 8:
            if (coeff_token >> 12) == 0x000F: # (1111)b
                coeff_token_length = 4
                TrailingOnes = 0
                TotalCoeff = 0
            elif (coeff_token >> 10) == 0x000F: # (0011 11)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 1
            elif (coeff_token >> 12) == 0x000E: # (1110)b
                coeff_token_length = 4
                TrailingOnes = 1
                TotalCoeff = 1
            elif (coeff_token >> 10) == 0x000B: # (0010 11)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 2
            elif (coeff_token >> 11) == 0x000F: # (0111 1)b
                coeff_token_length = 5
                TrailingOnes = 1
                TotalCoeff = 2
            elif (coeff_token >> 12) == 0x000D: # (1101)b
                coeff_token_length = 4
                TrailingOnes = 2
                TotalCoeff = 2
            elif (coeff_token >> 10) == 0x0008: # (0010 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 3
            elif (coeff_token >> 11) == 0x000C: # (0110 0)b
                coeff_token_length = 5
                TrailingOnes = 1
                TotalCoeff = 3
            elif (coeff_token >> 11) == 0x000E: # (0111 0)b
                coeff_token_length = 5
                TrailingOnes = 2
                TotalCoeff = 3
            elif (coeff_token >> 12) == 0x000C: # (1100)b
                coeff_token_length = 4
                TrailingOnes = 3
                TotalCoeff = 3
            elif (coeff_token >> 9) == 0x000F: # (0001 111)b
                coeff_token_length = 7
                TrailingOnes = 0
                TotalCoeff = 4
            elif (coeff_token >> 11) == 0x000A: # (0101 0)b
                coeff_token_length = 5
                TrailingOnes = 1
                TotalCoeff = 4
            elif (coeff_token >> 11) == 0x000B: # (0101 1)b
                coeff_token_length = 5
                TrailingOnes = 2
                TotalCoeff = 4
            elif (coeff_token >> 12) == 0x000B: # (1011)b
                coeff_token_length = 4
                TrailingOnes = 3
                TotalCoeff = 4
            elif (coeff_token >> 9) == 0x000B: # (0001 011)b
                coeff_token_length = 7
                TrailingOnes = 0
                TotalCoeff = 5
            elif (coeff_token >> 11) == 0x0008: # (0100 0)b
                coeff_token_length = 5
                TrailingOnes = 1
                TotalCoeff = 5
            elif (coeff_token >> 11) == 0x0009: # (0100 1)b
                coeff_token_length = 5
                TrailingOnes = 2
                TotalCoeff = 5
            elif (coeff_token >> 12) == 0x000A: # (1010)b
                coeff_token_length = 4
                TrailingOnes = 3
                TotalCoeff = 5
            elif (coeff_token >> 9) == 0x0009: # (0001 001)b
                coeff_token_length = 7
                TrailingOnes = 0
                TotalCoeff = 6
            elif (coeff_token >> 10) == 0x000E: # (0011 10)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 6
            elif (coeff_token >> 10) == 0x000D: # (0011 01)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 6
            elif (coeff_token >> 12) == 0x0009: # (1001)b
                coeff_token_length = 4
                TrailingOnes = 3
                TotalCoeff = 6
            elif (coeff_token >> 9) == 0x0008: # (0001 000)b
                coeff_token_length = 7
                TrailingOnes = 0
                TotalCoeff = 7
            elif (coeff_token >> 10) == 0x000A: # (0010 10)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 7
            elif (coeff_token >> 10) == 0x0009: # (0010 01)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 7
            elif (coeff_token >> 12) == 0x0008: # (1000)b
                coeff_token_length = 4
                TrailingOnes = 3
                TotalCoeff = 7
            elif (coeff_token >> 8) == 0x000F: # (0000 1111)b
                coeff_token_length = 8
                TrailingOnes = 0
                TotalCoeff = 8
            elif (coeff_token >> 9) == 0x000E: # (0001 110)b
                coeff_token_length = 7
                TrailingOnes = 1
                TotalCoeff = 8
            elif (coeff_token >> 9) == 0x000D: # (0001 101)b
                coeff_token_length = 7
                TrailingOnes = 2
                TotalCoeff = 8
            elif (coeff_token >> 11) == 0x000D: # (0110 1)b
                coeff_token_length = 5
                TrailingOnes = 3
                TotalCoeff = 8
            elif (coeff_token >> 8) == 0x000B: # (0000 1011)b
                coeff_token_length = 8
                TrailingOnes = 0
                TotalCoeff = 9
            elif (coeff_token >> 8) == 0x000E: # (0000 1110)b
                coeff_token_length = 8
                TrailingOnes = 1
                TotalCoeff = 9
            elif (coeff_token >> 9) == 0x000A: # (0001 010)b
                coeff_token_length = 7
                TrailingOnes = 2
                TotalCoeff = 9
            elif (coeff_token >> 10) == 0x000C: # (0011 00)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 9
            elif (coeff_token >> 7) == 0x000F: # (0000 0111 1)b
                coeff_token_length = 9
                TrailingOnes = 0
                TotalCoeff = 10
            elif (coeff_token >> 8) == 0x000A: # (0000 1010)b
                coeff_token_length = 8
                TrailingOnes = 1
                TotalCoeff = 10
            elif (coeff_token >> 8) == 0x000D: # (0000 1101)b
                coeff_token_length = 8
                TrailingOnes = 2
                TotalCoeff = 10
            elif (coeff_token >> 9) == 0x000C: # (0001 100)b
                coeff_token_length = 7
                TrailingOnes = 3
                TotalCoeff = 10
            elif (coeff_token >> 7) == 0x000B: # (0000 0101 1)b
                coeff_token_length = 9
                TrailingOnes = 0
                TotalCoeff = 11
            elif (coeff_token >> 7) == 0x000E: # (0000 0111 0)b
                coeff_token_length = 9
                TrailingOnes = 1
                TotalCoeff = 11
            elif (coeff_token >> 8) == 0x0009: # (0000 1001)b
                coeff_token_length = 8
                TrailingOnes = 2
                TotalCoeff = 11
            elif (coeff_token >> 8) == 0x000C: # (0000 1100)b
                coeff_token_length = 8
                TrailingOnes = 3
                TotalCoeff = 11
            elif (coeff_token >> 7) == 0x0008: # (0000 0100 0)b
                coeff_token_length = 9
                TrailingOnes = 0
                TotalCoeff = 12
            elif (coeff_token >> 7) == 0x000A: # (0000 0101 0)b
                coeff_token_length = 9
                TrailingOnes = 1
                TotalCoeff = 12
            elif (coeff_token >> 7) == 0x000D: # (0000 0110 1)b
                coeff_token_length = 9
                TrailingOnes = 2
                TotalCoeff = 12
            elif (coeff_token >> 8) == 0x0008: # (0000 1000)b
                coeff_token_length = 8
                TrailingOnes = 3
                TotalCoeff = 12
            elif (coeff_token >> 6) == 0x000D: # (0000 0011 01)b
                coeff_token_length = 10
                TrailingOnes = 0
                TotalCoeff = 13
            elif (coeff_token >> 7) == 0x0007: # (0000 0011 1)b
                coeff_token_length = 9
                TrailingOnes = 1
                TotalCoeff = 13
            elif (coeff_token >> 7) == 0x0009: # (0000 0100 1)b
                coeff_token_length = 9
                TrailingOnes = 2
                TotalCoeff = 13
            elif (coeff_token >> 7) == 0x000C: # (0000 0110 0)b
                coeff_token_length = 9
                TrailingOnes = 3
                TotalCoeff = 13
            elif (coeff_token >> 6) == 0x0009: # (0000 0010 01)b
                coeff_token_length = 10
                TrailingOnes = 0
                TotalCoeff = 14
            elif (coeff_token >> 6) == 0x000C: # (0000 0011 00)b
                coeff_token_length = 10
                TrailingOnes = 1
                TotalCoeff = 14
            elif (coeff_token >> 6) == 0x000B: # (0000 0010 11)b
                coeff_token_length = 10
                TrailingOnes = 2
                TotalCoeff = 14
            elif (coeff_token >> 6) == 0x000A: # (0000 0010 10)b
                coeff_token_length = 10
                TrailingOnes = 3
                TotalCoeff = 14
            elif (coeff_token >> 6) == 0x0005: # (0000 0001 01)b
                coeff_token_length = 10
                TrailingOnes = 0
                TotalCoeff = 15
            elif (coeff_token >> 6) == 0x0008: # (0000 0010 00)b
                coeff_token_length = 10
                TrailingOnes = 1
                TotalCoeff = 15
            elif (coeff_token >> 6) == 0x0007: # (0000 0001 11)b
                coeff_token_length = 10
                TrailingOnes = 2
                TotalCoeff = 15
            elif (coeff_token >> 6) == 0x0006: # (0000 0001 10)b
                coeff_token_length = 10
                TrailingOnes = 3
                TotalCoeff = 15
            elif (coeff_token >> 6) == 0x0001: # (0000 0000 01)b
                coeff_token_length = 10
                TrailingOnes = 0
                TotalCoeff = 16
            elif (coeff_token >> 6) == 0x0004: # (0000 0001 00)b
                coeff_token_length = 10
                TrailingOnes = 1
                TotalCoeff = 16
            elif (coeff_token >> 6) == 0x0003: # (0000 0000 11)b
                coeff_token_length = 10
                TrailingOnes = 2
                TotalCoeff = 16
            elif (coeff_token >> 6) == 0x0002: # (0000 0000 10)b
                coeff_token_length = 10
                TrailingOnes = 3
                TotalCoeff = 16
        elif 8 <= nC:
            if (coeff_token >> 10) == 0x0003: # (0000 11)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 0
            elif (coeff_token >> 10) == 0x0000: # (0000 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 1
            elif (coeff_token >> 10) == 0x0001: # (0000 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 1
            elif (coeff_token >> 10) == 0x0004: # (0001 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 2
            elif (coeff_token >> 10) == 0x0005: # (0001 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 2
            elif (coeff_token >> 10) == 0x0006: # (0001 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 2
            elif (coeff_token >> 10) == 0x0008: # (0010 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 3
            elif (coeff_token >> 10) == 0x0009: # (0010 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 3
            elif (coeff_token >> 10) == 0x000A: # (0010 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 3
            elif (coeff_token >> 10) == 0x000B: # (0010 11)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 3
            elif (coeff_token >> 10) == 0x000C: # (0011 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 4
            elif (coeff_token >> 10) == 0x000D: # (0011 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 4
            elif (coeff_token >> 10) == 0x000E: # (0011 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 4
            elif (coeff_token >> 10) == 0x000F: # (0011 11)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 4
            elif (coeff_token >> 10) == 0x0010: # (0100 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 5
            elif (coeff_token >> 10) == 0x0011: # (0100 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 5
            elif (coeff_token >> 10) == 0x0012: # (0100 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 5
            elif (coeff_token >> 10) == 0x0013: # (0100 11)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 5
            elif (coeff_token >> 10) == 0x0014: # (0101 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 6
            elif (coeff_token >> 10) == 0x0015: # (0101 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 6
            elif (coeff_token >> 10) == 0x0016: # (0101 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 6
            elif (coeff_token >> 10) == 0x0017: # (0101 11)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 6
            elif (coeff_token >> 10) == 0x0018: # (0110 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 7
            elif (coeff_token >> 10) == 0x0019: # (0110 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 7
            elif (coeff_token >> 10) == 0x001A: # (0110 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 7
            elif (coeff_token >> 10) == 0x001B: # (0110 11)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 7
            elif (coeff_token >> 10) == 0x001C: # (0111 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 8
            elif (coeff_token >> 10) == 0x001D: # (0111 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 8
            elif (coeff_token >> 10) == 0x001E: # (0111 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 8
            elif (coeff_token >> 10) == 0x001F: # (0111 11)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 8
            elif (coeff_token >> 10) == 0x0020: # (1000 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 9
            elif (coeff_token >> 10) == 0x0021: # (1000 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 9
            elif (coeff_token >> 10) == 0x0022: # (1000 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 9
            elif (coeff_token >> 10) == 0x0023: # (1000 11)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 9
            elif (coeff_token >> 10) == 0x0024: # (1001 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 10
            elif (coeff_token >> 10) == 0x0025: # (1001 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 10
            elif (coeff_token >> 10) == 0x0026: # (1001 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 10
            elif (coeff_token >> 10) == 0x0027: # (1001 11)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 10
            elif (coeff_token >> 10) == 0x0028: # (1010 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 11
            elif (coeff_token >> 10) == 0x0029: # (1010 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 11
            elif (coeff_token >> 10) == 0x002A: # (1010 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 11
            elif (coeff_token >> 10) == 0x002B: # (1010 11)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 11
            elif (coeff_token >> 10) == 0x002C: # (1011 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 12
            elif (coeff_token >> 10) == 0x002D: # (1011 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 12
            elif (coeff_token >> 10) == 0x002E: # (1011 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 12
            elif (coeff_token >> 10) == 0x002F: # (1011 11)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 12
            elif (coeff_token >> 10) == 0x0030: # (1100 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 13
            elif (coeff_token >> 10) == 0x0031: # (1100 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 13
            elif (coeff_token >> 10) == 0x0032: # (1100 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 13
            elif (coeff_token >> 10) == 0x0033: # (1100 11)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 13
            elif (coeff_token >> 10) == 0x0034: # (1101 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 14
            elif (coeff_token >> 10) == 0x0035: # (1101 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 14
            elif (coeff_token >> 10) == 0x0036: # (1101 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 14
            elif (coeff_token >> 10) == 0x0037: # (1101 11)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 14
            elif (coeff_token >> 10) == 0x0038: # (1110 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 15
            elif (coeff_token >> 10) == 0x0039: # (1110 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 15
            elif (coeff_token >> 10) == 0x003A: # (1110 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 15
            elif (coeff_token >> 10) == 0x003B: # (1110 11)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 15
            elif (coeff_token >> 10) == 0x003C: # (1111 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 16
            elif (coeff_token >> 10) == 0x003D: # (1111 01)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 16
            elif (coeff_token >> 10) == 0x003E: # (1111 10)b
                coeff_token_length = 6
                TrailingOnes = 2
                TotalCoeff = 16
            elif (coeff_token >> 10) == 0x003F: # (1111 11)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 16
        elif -1 == nC:
            if (coeff_token >> 14) == 0x0001: # (01)b
                coeff_token_length = 2
                TrailingOnes = 0
                TotalCoeff = 0
            elif (coeff_token >> 10) == 0x0007: # (0001 11)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 1
            elif (coeff_token >> 15) == 0x0001: # (1)b
                coeff_token_length = 1
                TrailingOnes = 1
                TotalCoeff = 1
            elif (coeff_token >> 10) == 0x0004: # (0001 00)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 2
            elif (coeff_token >> 10) == 0x0006: # (0001 10)b
                coeff_token_length = 6
                TrailingOnes = 1
                TotalCoeff = 2
            elif (coeff_token >> 13) == 0x0001: # (001)b
                coeff_token_length = 3
                TrailingOnes = 2
                TotalCoeff = 2
            elif (coeff_token >> 10) == 0x0003: # (0000 11)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 3
            elif (coeff_token >> 9) == 0x0003: # (0000 011)b
                coeff_token_length = 7
                TrailingOnes = 1
                TotalCoeff = 3
            elif (coeff_token >> 9) == 0x0002: # (0000 010)b
                coeff_token_length = 7
                TrailingOnes = 2
                TotalCoeff = 3
            elif (coeff_token >> 10) == 0x0005: # (0001 01)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 3
            elif (coeff_token >> 10) == 0x0002: # (0000 10)b
                coeff_token_length = 6
                TrailingOnes = 0
                TotalCoeff = 4
            elif (coeff_token >> 8) == 0x0003: # (0000 0011)b
                coeff_token_length = 8
                TrailingOnes = 1
                TotalCoeff = 4
            elif (coeff_token >> 8) == 0x0002: # (0000 0010)b
                coeff_token_length = 8
                TrailingOnes = 2
                TotalCoeff = 4
            elif (coeff_token >> 9) == 0x0000: # (0000 000)b
                coeff_token_length = 7
                TrailingOnes = 3
                TotalCoeff = 4
        elif -2 == nC:
            if (coeff_token >> 15) == 0x0001: # (1)b
                coeff_token_length = 1
                TrailingOnes = 0
                TotalCoeff = 0
            elif (coeff_token >> 9) == 0x000F: # (0001 111)b
                coeff_token_length = 7
                TrailingOnes = 0
                TotalCoeff = 1
            elif (coeff_token >> 14) == 0x0001: # (01)b
                coeff_token_length = 2
                TrailingOnes = 1
                TotalCoeff = 1
            elif (coeff_token >> 9) == 0x000E: # (0001 110)b
                coeff_token_length = 7
                TrailingOnes = 0
                TotalCoeff = 2
            elif (coeff_token >> 9) == 0x000D: # (0001 101)b
                coeff_token_length = 7
                TrailingOnes = 1
                TotalCoeff = 2
            elif (coeff_token >> 13) == 0x0001: # (001)b
                coeff_token_length = 3
                TrailingOnes = 2
                TotalCoeff = 2
            elif (coeff_token >> 7) == 0x0007: # (0000 0011 1)b
                coeff_token_length = 9
                TrailingOnes = 0
                TotalCoeff = 3
            elif (coeff_token >> 9) == 0x000C: # (0001 100)b
                coeff_token_length = 7
                TrailingOnes = 1
                TotalCoeff = 3
            elif (coeff_token >> 9) == 0x000B: # (0001 011)b
                coeff_token_length = 7
                TrailingOnes = 2
                TotalCoeff = 3
            elif (coeff_token >> 11) == 0x0001: # (0000 1)b
                coeff_token_length = 5
                TrailingOnes = 3
                TotalCoeff = 3
            elif (coeff_token >> 7) == 0x0006: # (0000 0011 0)b
                coeff_token_length = 9
                TrailingOnes = 0
                TotalCoeff = 4
            elif (coeff_token >> 7) == 0x0005: # (0000 0010 1)b
                coeff_token_length = 9
                TrailingOnes = 1
                TotalCoeff = 4
            elif (coeff_token >> 9) == 0x000A: # (0001 010)b
                coeff_token_length = 7
                TrailingOnes = 2
                TotalCoeff = 4
            elif (coeff_token >> 10) == 0x0001: # (0000 01)b
                coeff_token_length = 6
                TrailingOnes = 3
                TotalCoeff = 4
            elif (coeff_token >> 6) == 0x0007: # (0000 0001 11)b
                coeff_token_length = 10
                TrailingOnes = 0
                TotalCoeff = 5
            elif (coeff_token >> 6) == 0x0006: # (0000 0001 10)b
                coeff_token_length = 10
                TrailingOnes = 1
                TotalCoeff = 5
            elif (coeff_token >> 7) == 0x0004: # (0000 0010 0)b
                coeff_token_length = 9
                TrailingOnes = 2
                TotalCoeff = 5
            elif (coeff_token >> 9) == 0x0009: # (0001 001)b
                coeff_token_length = 7
                TrailingOnes = 3
                TotalCoeff = 5
            elif (coeff_token >> 5) == 0x0007: # (0000 0000 111)b
                coeff_token_length = 11
                TrailingOnes = 0
                TotalCoeff = 6
            elif (coeff_token >> 5) == 0x0006: # (0000 0000 110)b
                coeff_token_length = 11
                TrailingOnes = 1
                TotalCoeff = 6
            elif (coeff_token >> 6) == 0x0005: # (0000 0001 01)b
                coeff_token_length = 10
                TrailingOnes = 2
                TotalCoeff = 6
            elif (coeff_token >> 9) == 0x0008: # (0001 000)b
                coeff_token_length = 7
                TrailingOnes = 3
                TotalCoeff = 6
            elif (coeff_token >> 4) == 0x0007: # (0000 0000 0111)b
                coeff_token_length = 12
                TrailingOnes = 0
                TotalCoeff = 7
            elif (coeff_token >> 4) == 0x0006: # (0000 0000 0110)b
                coeff_token_length = 12
                TrailingOnes = 1
                TotalCoeff = 7
            elif (coeff_token >> 5) == 0x0005: # (0000 0000 101)b
                coeff_token_length = 11
                TrailingOnes = 2
                TotalCoeff = 7
            elif (coeff_token >> 6) == 0x0004: # (0000 0001 00)b
                coeff_token_length = 10
                TrailingOnes = 3
                TotalCoeff = 7
            elif (coeff_token >> 3) == 0x0007: # (0000 0000 0011 1)b
                coeff_token_length = 13
                TrailingOnes = 0
                TotalCoeff = 8
            elif (coeff_token >> 4) == 0x0005: # (0000 0000 0101)b
                coeff_token_length = 12
                TrailingOnes = 1
                TotalCoeff = 8
            elif (coeff_token >> 4) == 0x0004: # (0000 0000 0100)b
                coeff_token_length = 12
                TrailingOnes = 2
                TotalCoeff = 8
            elif (coeff_token >> 5) == 0x0004: # (0000 0000 100)b
                coeff_token_length = 11
                TrailingOnes = 3
                TotalCoeff = 8
        
        self.position -= 16 - coeff_token_length
        

        return TrailingOnes, TotalCoeff


    def find_table(self, max_number, length_table, code_table):
        ret = 0
        for i in range(max_number):
            code_len = length_table[i]
            if code_len == 0:
                break

            if self.read_bits(code_len) == code_table[i]:
                ret = i
                break
            else:
                self.position -= code_len
        return ret


    def get_total_zeros(self, TotalCoeff, maxNumCoeff):

        total_zeros_table_chroma_dc_length_420 = [
            [1, 2, 3, 3],
            [1, 2, 2],
            [1, 1]
        ]

        # Total Zeros Table Chroma DC Code for 4:2:0 format
        total_zeros_table_chroma_dc_code_420 = [
            [1, 1, 1, 0],
            [1, 1, 0],
            [1, 0]
        ]


        total_zeros_table_chroma_dc_length_422 = [
            [1, 3, 3, 4, 4, 4, 5, 5],
            [3, 2, 3, 3, 3, 3, 3],
            [3, 3, 2, 2, 3, 3],
            [3, 2, 2, 2, 3],
            [2, 2, 2, 2],
            [2, 2, 1],
            [1, 1]
        ]

        # Total Zeros Table Chroma DC Code for 4:2:2 format
        total_zeros_table_chroma_dc_code_422 = [
            [1, 2, 3, 2, 3, 1, 1, 0],
            [0, 1, 1, 4, 5, 6, 7],
            [0, 1, 1, 2, 6, 7],
            [6, 0, 1, 2, 7],
            [0, 1, 2, 3],
            [0, 1, 1],
            [0, 1]
        ]
    
            
        # Total Zeros Table Length
        total_zeros_table_length = [
            [1, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9],
            [3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6],
            [4, 3, 3, 3, 4, 4, 3, 3, 4, 5, 5, 6, 5, 6],
            [5, 3, 4, 4, 3, 3, 3, 4, 3, 4, 5, 5, 5],
            [4, 4, 4, 3, 3, 3, 3, 3, 4, 5, 4, 5],
            [6, 5, 3, 3, 3, 3, 3, 3, 4, 3, 6],
            [6, 5, 3, 3, 3, 2, 3, 4, 3, 6],
            [6, 4, 5, 3, 2, 2, 3, 3, 6],
            [6, 6, 4, 2, 2, 3, 2, 5],
            [5, 5, 3, 2, 2, 2, 4],
            [4, 4, 3, 3, 1, 3],
            [4, 4, 2, 1, 3],
            [3, 3, 1, 2],
            [2, 2, 1],
            [1, 1]
        ]

        # Total Zeros Table Code
        total_zeros_table_code = [
            [1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1],
            [7, 6, 5, 4, 3, 5, 4, 3, 2, 3, 2, 3, 2, 1, 0],
            [5, 7, 6, 5, 4, 3, 4, 3, 2, 3, 2, 1, 1, 0],
            [3, 7, 5, 4, 6, 5, 4, 3, 3, 2, 2, 1, 0],
            [5, 4, 3, 7, 6, 5, 4, 3, 2, 1, 1, 0],
            [1, 1, 7, 6, 5, 4, 3, 2, 1, 1, 0],
            [1, 1, 5, 4, 3, 3, 2, 1, 1, 0],
            [1, 1, 1, 3, 3, 2, 2, 1, 0],
            [1, 0, 1, 3, 2, 1, 1, 1],
            [1, 0, 1, 3, 2, 1, 1],
            [0, 1, 1, 2, 1, 3],
            [0, 1, 1, 1, 1],
            [0, 1, 1, 1],
            [0, 1, 1],
            [0, 1]
        ]

        TotalZeros = 0
        if maxNumCoeff == 4:
            lengthTable = total_zeros_table_chroma_dc_length_420[TotalCoeff]
            codeTable = total_zeros_table_chroma_dc_code_420[TotalCoeff]
            TotalZeros = self.find_table(4, lengthTable, codeTable)
        elif maxNumCoeff == 8:
            lengthTable = total_zeros_table_chroma_dc_length_422[TotalCoeff]
            codeTable = total_zeros_table_chroma_dc_code_422[TotalCoeff]
            TotalZeros = self.find_table(8, lengthTable, codeTable)
        else:
            lengthTable = total_zeros_table_length[TotalCoeff]
            codeTable = total_zeros_table_code[TotalCoeff]
            TotalZeros = self.find_table(16, lengthTable, codeTable)
        return TotalZeros

    def get_runbefore(self, zerosLeft):

        runBeforeTableLength = [
            [1, 1],
            [1, 2, 2],
            [2, 2, 2, 2],
            [2, 2, 2, 3, 3],
            [2, 2, 3, 3, 3, 3],
            [2, 3, 3, 3, 3, 3, 3],
            [3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11]
        ]

        runBeforeTableCode = [
            [1, 0],
            [1, 1, 0],
            [3, 2, 1, 0],
            [3, 2, 1, 1, 0],
            [3, 2, 3, 2, 1, 0],
            [3, 0, 1, 3, 2, 5, 4],
            [7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        ]


        tableLength = runBeforeTableLength[zerosLeft]
        tableCode = runBeforeTableCode[zerosLeft]
        runbefore = self.find_table(15, tableLength, tableCode)

        return runbefore